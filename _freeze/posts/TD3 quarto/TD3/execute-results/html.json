{
  "hash": "8c3f90a95338858039d0e60fc0fed6e0",
  "result": {
    "markdown": "---\ntitle: \"Exercices Semaine 3\"\n---\n\n\n\n\n## TD3\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"RSQLite\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThe following package(s) will be installed:\n- RSQLite [2.3.5]\nThese packages will be installed into \"~/Desktop/my_blog/renv/library/R-4.3/x86_64-w64-mingw32\".\n\n# Installing packages --------------------------------------------------------\n- Installing RSQLite ...                        OK [linked from cache]\nSuccessfully installed 1 package in 16 milliseconds.\n```\n:::\n:::\n\n\nExercise 1 : Lire le fichier parquet avec la librairie arrow\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_parquet <- arrow::read_parquet(\"C:/Users/yavav/OneDrive - Universitat de València/tokyo_athletes.parquet\")\ndata_parquet <- as.data.frame(data_parquet)\n\nView(data_parquet)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndim(data_parquet) #Trois variables et 11085 colonnes\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 11085     3\n```\n:::\n\n```{.r .cell-code}\nstr(data_parquet) #Colonnes présentes: Name, NOC, Discipline\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n'data.frame':\t11085 obs. of  3 variables:\n $ Name      : chr  \"AALERUD Katrine\" \"ABAD Nestor\" \"ABAGNALE Giovanni\" \"ABALDE Alberto\" ...\n $ NOC       : chr  \"Norway\" \"Spain\" \"Italy\" \"Spain\" ...\n $ Discipline: chr  \"Cycling Road\" \"Artistic Gymnastics\" \"Rowing\" \"Basketball\" ...\n```\n:::\n:::\n\n\nExercise 2: Lire le fichier json avec la libraire jsonlite\n\n\n::: {.cell}\n\n```{.r .cell-code}\nchemin_acces <- \"C:/Users/yavav/OneDrive - Universitat de València/olympics_athletes.json\"\n\nlibrary(jsonlite)\ndatos_json <- fromJSON(chemin_acces)\ndatos_json <- as.data.frame(datos_json)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndim(datos_json) #269731 lignes et 13 colonnes\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 269731     13\n```\n:::\n\n```{.r .cell-code}\nstr(datos_json) #On observe le nom des différentes colonnes\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n'data.frame':\t269731 obs. of  13 variables:\n $ ID    : int  1 2 3 4 5 5 5 5 5 5 ...\n $ Name  : chr  \"A Dijiang\" \"A Lamusi\" \"Gunnar Nielsen Aaby\" \"Edgar Lindenau Aabye\" ...\n $ Sex   : chr  \"M\" \"M\" \"M\" \"M\" ...\n $ Age   : int  24 23 24 34 21 21 25 25 27 27 ...\n $ Height: int  180 170 NA NA 185 185 185 185 185 185 ...\n $ Weight: num  80 60 NA NA 82 82 82 82 82 82 ...\n $ Team  : chr  \"China\" \"China\" \"Denmark\" \"Denmark/Sweden\" ...\n $ NOC   : chr  \"CHN\" \"CHN\" \"DEN\" \"DEN\" ...\n $ Games : chr  \"1992 Summer\" \"2012 Summer\" \"1920 Summer\" \"1900 Summer\" ...\n $ City  : chr  \"Barcelona\" \"London\" \"Antwerpen\" \"Paris\" ...\n $ Sport : chr  \"Basketball\" \"Judo\" \"Football\" \"Tug-Of-War\" ...\n $ Event : chr  \"Basketball Men's Basketball\" \"Judo Men's Extra-Lightweight\" \"Football Men's Football\" \"Tug-Of-War Men's Tug-Of-War\" ...\n $ Medal : chr  NA NA NA \"Gold\" ...\n```\n:::\n:::\n\n\nExercise 3\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(RSQLite)\n\ncon <- dbConnect(SQLite(), dbname =\"C:/Users/yavav/Documents/R avancé et Git/data.sqlite\")\n```\n:::\n\n\nExercise 4:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntables <- dbListTables(con)\nprint(tables) ##Tables: Tokyo_medals et Tokyo_teams\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"C:/Users/yavav/OneDrive - Universitat de València/__MACOSX/olympics_athletes.json\"\n[2] \"olympics_athletes\"                                                                \n[3] \"tokyo_athletes\"                                                                   \n[4] \"tokyo_medals\"                                                                     \n[5] \"tokyo_teams\"                                                                      \n```\n:::\n:::\n\n\nExercise 5:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(RSQLite)\nlibrary(DBI)\ndbWriteTable(con, \"tokyo_athletes\", data_parquet, overwrite=TRUE)\ndbWriteTable(con, \"olympics_athletes\", datos_json, overwrite=TRUE)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncolonnes_olympics_athletes <- dbListFields(con, \"olympics_athletes\")\n\n# Afficher la liste des colonnes\nprint(colonnes_olympics_athletes)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"ID\"     \"Name\"   \"Sex\"    \"Age\"    \"Height\" \"Weight\" \"Team\"   \"NOC\"   \n [9] \"Games\"  \"City\"   \"Sport\"  \"Event\"  \"Medal\" \n```\n:::\n\n```{.r .cell-code}\ncolonnes_tokyo_athletes <- dbListFields(con, \"tokyo_athletes\")\n\n# Afficher la liste des colonnes\nprint(colonnes_tokyo_athletes)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Name\"       \"NOC\"        \"Discipline\"\n```\n:::\n:::\n\n\nExercise 7\n\n\n::: {.cell}\n\n```{.r .cell-code}\n##Olympics\n\nlibrary(tibble)\n\n#Lire la table depuis la base de données\ntable_olympics_athletes <- dbReadTable(con, \"olympics_athletes\")\n\n# Convertir la table en tibble\ntibble_olympics_athletes <- as_tibble(table_olympics_athletes)\n\n##Athletes\n\n#Lire la table depuis la base de données\ntable_tokyo_athletes <- dbReadTable(con, \"tokyo_athletes\")\n\n# Convertir la table en tibble\ntibble_tokyo_athletes <- as_tibble(table_tokyo_athletes)\n```\n:::\n\n\nExercise 8:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Importation des libraires \nlibrary(dplyr)\nlibrary(tidyr)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntibble_olympics_athletes <- tibble_olympics_athletes %>% mutate(Sex = as.factor(Sex))\n```\n:::\n\n\n#### Exercise 9: Créer deux colonnes à partir de la colonne Games\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhelp(\"separate_wider_delim\")\n\nseparate_wider_delim(tibble_olympics_athletes, cols = Games, delim= \" \", names=c(\"Year\", \"isSummer\"), cols_remove = FALSE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 269,731 × 15\n      ID Name   Sex     Age Height Weight Team  NOC   Year  isSummer Games City \n   <int> <chr>  <fct> <int>  <int>  <dbl> <chr> <chr> <chr> <chr>    <chr> <chr>\n 1     1 A Dij… M        24    180     80 China CHN   1992  Summer   1992… Barc…\n 2     2 A Lam… M        23    170     60 China CHN   2012  Summer   2012… Lond…\n 3     3 Gunna… M        24     NA     NA Denm… DEN   1920  Summer   1920… Antw…\n 4     4 Edgar… M        34     NA     NA Denm… DEN   1900  Summer   1900… Paris\n 5     5 Chris… F        21    185     82 Neth… NED   1988  Winter   1988… Calg…\n 6     5 Chris… F        21    185     82 Neth… NED   1988  Winter   1988… Calg…\n 7     5 Chris… F        25    185     82 Neth… NED   1992  Winter   1992… Albe…\n 8     5 Chris… F        25    185     82 Neth… NED   1992  Winter   1992… Albe…\n 9     5 Chris… F        27    185     82 Neth… NED   1994  Winter   1994… Lill…\n10     5 Chris… F        27    185     82 Neth… NED   1994  Winter   1994… Lill…\n# ℹ 269,721 more rows\n# ℹ 3 more variables: Sport <chr>, Event <chr>, Medal <chr>\n```\n:::\n:::\n\n\n10. **Calculer la moyenne d’age des athletes pour chacune des éditions des JO d’été. Quelle édition a compté les athlètes les plus jeunes ? Les plus vieux ?**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nany(is.na(tibble_olympics_athletes$Age)) #Ce code permet de vérifier la présence des NA's au sein de la colonne Age\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\ntibble_olympics_athletes %>% group_by(Games) %>%\n  summarise(mean_age=mean(Age,na.rm=TRUE)) #Ce code calcule la moyenne d'age pour chacune des éditions des JO, en excluant les valeurs manquantes du calcul. \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 51 × 2\n   Games       mean_age\n   <chr>          <dbl>\n 1 1896 Summer     23.6\n 2 1900 Summer     28.9\n 3 1904 Summer     26.7\n 4 1906 Summer     27.1\n 5 1908 Summer     27.0\n 6 1912 Summer     27.5\n 7 1920 Summer     29.3\n 8 1924 Summer     28.1\n 9 1924 Winter     27.6\n10 1928 Summer     28.0\n# ℹ 41 more rows\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntibble_olympics_athletes %>% group_by(Games) %>%\n  summarise(mean_age=mean(Age,na.rm=TRUE)) %>% \n  arrange(mean_age) %>% slice(1) #Cela permet d'ordonner de manière croissante les moyennes d'âge ainsi que de sélectionner la première ligne (les plus jeunes)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 2\n  Games       mean_age\n  <chr>          <dbl>\n1 1984 Winter     23.4\n```\n:::\n\n```{.r .cell-code}\ntibble_olympics_athletes %>% group_by(Games) %>%\n  summarise(mean_age=mean(Age,na.rm=TRUE)) %>% \n  arrange(desc(mean_age)) %>% slice(1) #Cela ordonne de manière décroissante pour trouver les plus âgés \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 2\n  Games       mean_age\n  <chr>          <dbl>\n1 1932 Summer     30.2\n```\n:::\n:::\n\n\nOn observe donc que l'édition qui a compté avec les athlètes les plus jeunes ont été les jeux d'hiver 1984, tandis que celle avec les plus vieux, les jeux d'été en 1932.\n\n11. **Quelle est la discipline des JO d’été dont la taille des athlètes féminines est la plus grande ? Quelle a été cette discipline au cours de chacune des éditions ? Calculez le nombre de fois où chaque discipline a été la discipline avec les plus grandes athlètes**\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntibble_olympics_athletes %>% filter(Sex==\"F\") %>% arrange(desc(Height)) %>% slice(1) %>% select(Height, Sport) #On filtre les femmes, on ordonne et sélectionne la ligne ainsi que les variables d'intérêt. \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 2\n  Height Sport     \n   <int> <chr>     \n1    213 Basketball\n```\n:::\n:::\n\n\nLa discipline dont la taille des athlètes féminines est la plus grande est le basketball.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntibble_olympics_athletes %>% filter(Sex==\"F\" & !is.na(Height)) %>% group_by(Games) %>% \n  arrange(desc(Height)) %>% slice(1) %>% select(Games, Height, Sport) #On filtre pour les femmes et pour la taille sans valeurs manquantes, puis on calcule la taille plus grande pour chaque game et on sélectionne la colonne du sport correspondant. \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 45 × 3\n# Groups:   Games [45]\n   Games       Height Sport         \n   <chr>        <int> <chr>         \n 1 1920 Summer    175 Diving        \n 2 1924 Summer    175 Fencing       \n 3 1924 Winter    165 Figure Skating\n 4 1928 Summer    183 Fencing       \n 5 1928 Winter    165 Figure Skating\n 6 1932 Summer    183 Fencing       \n 7 1932 Winter    168 Figure Skating\n 8 1936 Summer    183 Fencing       \n 9 1936 Winter    168 Figure Skating\n10 1948 Summer    180 Athletics     \n# ℹ 35 more rows\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntibble_olympics_athletes %>% filter(Sex==\"F\" & !is.na(Height)) %>% group_by(Games) %>% \n  arrange(desc(Height)) %>% slice(1) %>% select(Games, Height, Sport) %>% pull(Sport) %>% table() #On extrait la colonne sport et fait un tablau de fréquence. \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n.\n       Alpine Skiing            Athletics           Basketball \n                   3                    5                    9 \n           Bobsleigh Cross Country Skiing               Diving \n                   3                    4                    1 \n             Fencing       Figure Skating           Ice Hockey \n                   4                    4                    1 \n                Luge        Speed Skating             Swimming \n                   3                    4                    1 \n          Volleyball \n                   3 \n```\n:::\n:::\n\n\n**On dispose du texte suivant** :\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntexte <- \"Les jeux olympiques d’été se déroulent normalement tous les 4 ans, durant les mois de Juillet et Août. Les jeux de Rio ont eu lieu du 5 Août 2016 au 20 Août 2016, ceux de Tokyo du 23 Juillet 2021 au 8 Août 2021, et ceux de Paris auront lieu du 26 Juillet 2024 au 11 Août 2024. Plus de 10000 athlètes sont attendus du monde\nentier à Paris.\"\n```\n:::\n\n\n12. **Extrayez les dates des différentes éditions des JO**\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Chargement de librairie \nlibrary(stringr)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_extract_all(texte, \"\\\\b(\\\\d{1,2} \\\\w+ \\\\d{4})\\\\b\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n[1] \"5 Août 2016\"     \"20 Août 2016\"    \"23 Juillet 2021\" \"8 Août 2021\"    \n[5] \"26 Juillet 2024\" \"11 Août 2024\"   \n```\n:::\n:::\n\n\n13. **Remplacer les noms des mois par leur numéro pour rendre ces éléments convertibles en date en utilisant la fonction str_replace**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_replace_all(texte, c(\"Juillet\"=\"7\", \"Août\"=\"8\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Les jeux olympiques d’été se déroulent normalement tous les 4 ans, durant les mois de 7 et 8. Les jeux de Rio ont eu lieu du 5 8 2016 au 20 8 2016, ceux de Tokyo du 23 7 2021 au 8 8 2021, et ceux de Paris auront lieu du 26 7 2024 au 11 8 2024. Plus de 10000 athlètes sont attendus du monde\\nentier à Paris.\"\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(lubridate)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npatron_dates <- \"\\\\b(\\\\d{1,2} \\\\w+ \\\\d{4})\\\\b\"\n\n# Extraire et convertir toutes les dates\ndates <- str_extract_all(texte, patron_dates) %>%\n  lapply(function(matches) {\n    dmy(matches)\n  })\n\n#Imprimer le résultat\nprint(dates)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n[1] \"2016-08-05\" \"2016-08-20\" \"2021-07-23\" \"2021-08-08\" \"2024-07-26\"\n[6] \"2024-08-11\"\n```\n:::\n:::\n\n\n15. **Combien de jours ont séparés les éditions de Rio et Tokyo ? Et sépareront les éditions de Tokyo et de Paris ? Faites le même calcul en semaines.**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nRio_Tokyo <- difftime(dates[[1]][3], dates[[1]][2], units = \"days\") #Diff entre le troisième et deuxième élément de la liste dates en jour\nprint(Rio_Tokyo)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTime difference of 1798 days\n```\n:::\n\n```{.r .cell-code}\nTokyo_Paris <- difftime(dates[[1]][5], dates[[1]][4], units = \"days\") #Diff entre le cinquième et sixième élément de la liste dates en jour\nprint(Tokyo_Paris)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTime difference of 1083 days\n```\n:::\n\n```{.r .cell-code}\nRio_Tokyo_semaines <- difftime(dates[[1]][3], dates[[1]][2], units = \"weeks\") #Diff entre le troisième et deuxième élément de la liste dates en semaines\nprint(Rio_Tokyo_semaines)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTime difference of 256.8571 weeks\n```\n:::\n\n```{.r .cell-code}\nTokyo_Paris_semaines <- difftime(dates[[1]][5], dates[[1]][4], units = \"weeks\") #Diff entre le cinquième et sixième élément de la liste dates en semaines\nprint(Tokyo_Paris_semaines)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTime difference of 154.7143 weeks\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}