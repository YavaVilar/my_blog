{
  "hash": "656039f521470e6378d4334842b9961d",
  "result": {
    "markdown": "---\ntitle: \"Exercices Semaine 2\"\ndate: \"03/02/2024\"\nauthor: Yava Vilar Valera\ntoc: true\n---\n\n\n\n\n## Exercices Semaine 2\n\nCes exercises ont pour but l'implémentation des fonctions pour analyser les données historiques relatives aux jeux olympiques. Avec les fonctions qui seront générées, on pourra exploiter des informations telles que le nombre de médailles obtenues par athlète au cours de leur participation au programme, les nationalités les plus représentées aux Jeux Olympiques et bien encore plus!\n\n![](images/clipboard-767475626.png){fig-align=\"center\" width=\"431\"}\n\n-   **Lancer la commande suivante**. **Que contient l'objet?**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(rvest)\nlibrary(purrr)\n\nlist_tables <-\n  session(\"https://fr.wikipedia.org/wiki/Liste_des_m%C3%A9daill%C3%A9s_olympiques\") |>\n  html_elements(\".wikitable\") |>\n  html_table()\n```\n:::\n\n\nL'objet contient une liste avec 6 éléments contenant différentes bases de données.\n\n-   **On s'intéresse à la première table. Créer un objet intitulédata_medailles_sport_ete contenant le premier élément de list_tables. La table n’est pas bien formattée. Supprimer la première colonne, les noms de colonnes et la première ligne. Renommer les colonnes en c(\"Discipline\", \"Annees\", \"Editions\", \"Epreuves_2020\", \"Or\", \"Argent\", \"Bronze\", \"Total\", \"Athletes_medailles\", \"Athletes_or\"). Les colonnes Editions, Epreuves_2020, Or, Argent, Bronze, Total seront converties en colonnes d’entiers.**\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Créer data_medailles_sport_ete contenant la première table de la liste \n\ndata_medailles_sport_ete <- list_tables[[1]]\n\n# Supprimer la première colonne, les noms de colonnes et la première ligne\n\ndata_medailles_sport_ete <- data_medailles_sport_ete[-1,-1]\ncolnames(data_medailles_sport_ete) <- NULL\n\n# Renommer des colonnes \n\ncolnames(data_medailles_sport_ete) <-  c(\"Discipline\", \"Annees\", \"Editions\",\n  \"Epreuves_2020\", \"Or\", \"Argent\", \"Bronze\", \"Total\", \"Athletes_medailles\",\n  \"Athletes_or\")\n\n#Coder en integer \n\ndata_medailles_sport_ete[, 3:8] <- lapply(data_medailles_sport_ete[, 3:8], as.integer)\n```\n:::\n\n\n-   **Les 3 disciplines avec le plus de médailles distribuées**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(dplyr)\n\n#Option avec le tidyverse\n\nTop3_disciplines <- data_medailles_sport_ete |> arrange(desc(Total)) |> slice(1:3)\n\nTop3_disciplines\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 10\n  Discipline             Annees Editions Epreuves_2020    Or Argent Bronze Total\n  <chr>                  <chr>     <int>         <int> <int>  <int>  <int> <int>\n1 Athlétisme             Depui…       29            48  1028   1030   1027  3085\n2 Natation(hommes, femm… Depui…       29            37   607    604    603  1814\n3 Lutte                  1896,…       28            18   430    429    499  1358\n# ℹ 2 more variables: Athletes_medailles <chr>, Athletes_or <chr>\n```\n:::\n\n```{.r .cell-code}\n#Une autre option avec la fct orderet regarder les 3 premiers\n\norder(data_medailles_sport_ete$Total, decreasing=TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1]  1 18 17 12  5 25  2  7  6 14  9 16 28  8 21 23 26 22 20  3 24 15 10  4 29\n[26] 30 13 19 27 11\n```\n:::\n:::\n\n\nL'athléthisme, la natation et la lutte sont les trois disciplines avec le plus de médailles distribuées.\n\n-   **Les 3 disciplines avec le moins d'épreuves en 2020**\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_medailles_sport_ete_ordonne_epreuves2020 <- data_medailles_sport_ete |> arrange(Epreuves_2020) |> slice(1:3)\ndata_medailles_sport_ete_ordonne_epreuves2020 ##Sélectionner les 3 dernières\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 10\n  Discipline Annees             Editions Epreuves_2020    Or Argent Bronze Total\n  <chr>      <chr>                 <int>         <int> <int>  <int>  <int> <int>\n1 Football   1900–1928,depuis …       27             2    34     34     35   103\n2 Golf       1900–1904,depuis …        4             2     8      8      9    19\n3 Handball   1936,depuis 1972         14             2    26     26     26    78\n# ℹ 2 more variables: Athletes_medailles <chr>, Athletes_or <chr>\n```\n:::\n:::\n\n\nLe football, le golf et le handball ont été les disciplines avec le moins d'épreuves en 2020.\n\n-   **Calculer une fonction depuis qui représente depuis quelle année l'édition est au programme**\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncalcul_nb_editions_int <- function(depuis){\n  annee <- 2020\n  int <- 4\n  x <- ((annee-depuis)/4)+1\n  if (depuis<1916){\n    nb_ed <- x-3\n    nb_ed\n  }\n  if(depuis>1916){\n    nb_ed <- x-2\n    nb_ed\n  }\n  if(depuis>1944){\n    nb_ed <- x\n    nb_ed\n  }\n  nb_ed\n}\n\n#Exemple d'utilisation\ncalcul_nb_editions_int(1992)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 8\n```\n:::\n:::\n\n\n-   **Proposer une nouvelle fonction calcul_nb_editions_str qui prendra cette fois-ci en entrée des chaînes de caractères**\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncalcul_nb_editions_str <- function(x){\n  \n  z <- str_split(x,\",\",simplify = TRUE)\n  r <- as.matrix(ifelse(!grepl(\"depuis|-\",z),\"P\",z))\n  # permet de compter le nombre de valeur unique pour l'année \n  \n  res_annee <- 0\n  res_depuis <- 0\n  res_tiret <- 0\n  \n  calcul_nb_editions_int <- function(depuis){\n    annee <- 2020\n    int <- 4\n    x <- ((annee-depuis)/4)+1\n    if (depuis<1916){\n      nb_ed <- x-3\n      nb_ed\n    }\n    if(depuis>1916){\n      nb_ed <- x-2\n      nb_ed\n    }\n    if(depuis>1944){\n      nb_ed <- x\n      nb_ed\n    }\n    return(nb_ed)\n  }\n  \n  calcul_nb_editions_interne  <- function(deb,fi){\n    \n    int <- 4\n    x <- ((fi-deb)/4)+1\n    if (fi < 1916 & deb < 1916){\n      nb_ed <- x\n      nb_ed\n    }\n    if (deb < 1916 & fi < 1944){\n      nb_ed <- x-1\n      nb_ed\n    }\n    if (deb < 1916 & fi> 1944){\n      nb_ed <- x-3\n      nb_ed\n    }\n    if(deb>1916 & fi < 1944){\n      nb_ed <- x\n      nb_ed\n    }\n    if(deb > 1916 & fi > 1944){\n      nb_ed <- x-2\n      nb_ed\n    }\n    \n    if (deb > 1944 & fi > 1944){\n      nb_ed <- x\n      nb_ed\n    }\n    \n    return(nb_ed)\n  }\n  \n  \n  for (j in 1:nrow(r)) {\n    if (any(str_detect(r[j, 1], \"-\"))) {\n      e <- sapply(str_split(r[j, 1], \"-\"), as.integer)\n      debut <- e[1, 1]\n      fin <- e[2, 1]\n      res_tiret <- calcul_nb_editions_interne(debut, fin)\n    }\n    \n    if (any(str_detect(r[j, 1], \"depuis\"))) {\n      d <- as.integer(str_extract_all(r[j, 1], \"\\\\d+\"))\n      res_depuis <- calcul_nb_editions_int(d)\n    }\n    \n    if(is.character(r[j, 1])){\n      sp <- str_detect(r,\"P\")\n      res_annee <- sum(sp)  # premier cas de fonction \n    }\n  }\n  \n  resultat <- sum(res_depuis, res_tiret, res_annee)\n  return(resultat)\n}\n\n#Exemple d'utilisation\ncalcul_nb_editions_str(\"1896, 1904, depuis 1920\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 26\n```\n:::\n:::\n\n\n-   **Fonction générique calcul_nb_editions et deux implémentations calcul_nb_editions.integer et calcul_nb_editions.character**\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Définition de la fonction génerique\ncalcul_nb_editions <- function(x) {\n  UseMethod(\"calcul_nb_editions\")\n}\n\n#Fonction integer\n\ncalcul_nb_editions.integer <- function(x) {\n  nb_participations <- length(unique(x))\n  return(nb_participations)\n}\n\ncalcul_nb_editions.numeric <- function(x) {\n  # Vérifier si x est entier\n  if (x == floor(x)) {\n    return(calcul_nb_editions.integer(as.integer(x)))\n  } else {\n    stop(\"La méthode n'est définie que pour les entiers\")\n  }\n}\n\n#Fonction caractère\n\ncalcul_nb_editions.character <- function(x) {\n  annee_actuelle <- as.integer(format(Sys.Date(), \"%Y\"))\n  annees <- unlist(str_extract_all(x, \"\\\\b\\\\d{4}\\\\b\"))\n  depuis_annees <- as.integer(unlist(str_extract_all(x, regex(\"(?<=depuis )\\\\d{4}\", ignore_case = TRUE)))) \n  \n  plages <- str_extract_all(x, \"\\\\d{4}–\\\\d{4}\")\n  plages <- unlist(plages)\n  for (plage in plages) {\n    annees_debut_fin <- as.integer(unlist(str_extract_all(plage, \"\\\\d{4}\")))\n    annees <- c(annees, seq(annees_debut_fin[1], annees_debut_fin[2], by = 4))\n  }\n\n  for (depuis_annee in depuis_annees) {\n    annees_depuis <- seq(depuis_annee, annee_actuelle, by = 4)\n    annees <- c(annees, annees_depuis)\n  }\n  nb_editions <- length(unique(as.integer(annees)))\n  \n  return(nb_editions)\n}\n```\n:::\n\n\n**Résultats pour les appels:**\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncalcul_nb_editions(2000)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n```\n:::\n\n```{.r .cell-code}\ncalcul_nb_editions(\"1904–1924, depuis 1948\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 26\n```\n:::\n:::\n\n\nLe résultat du premier calcul de la fonction est égal à 1 et celui du deuxième calcul le deuxième est égal à 26.\n\n-   **Fonction calcul_medailles_individuelles qui détermine le nombre de médaille maximal a été obtenu par un athlète lors d’olympiades**\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncalcul_medailles_individuelles <- function(athletes_medailles) {\n  # Dataframe pour stocker les résultats\n  resultats_df <- data.frame(Athlete = character(), TotalMedailles = integer(), stringsAsFactors = FALSE)\n  \n  # Séparation des athlètes\n  athletes_details <- strsplit(athletes_medailles, \"\\\\)\\\\s*(?=[A-Z])\", perl = TRUE)[[1]]\n  \n  for (detail in athletes_details) {\n    detail <- gsub(\"[()]\", \"\", detail) # Nettoyer la chaîne\n    name_medals_parts <- strsplit(detail, \"\\\\s(?=\\\\d+-\\\\d+-\\\\d+)\", perl = TRUE)[[1]] # \n    \n  #Séparer le nom des médailles\n    \n    if (length(name_medals_parts) < 2) next\n    \n    athlete_name <- name_medals_parts[1]\n    medals_info <- strsplit(name_medals_parts[2], \"-\")[[1]]\n    total_medals <- sum(as.integer(medals_info))\n    \n    resultats_df <- rbind(resultats_df, data.frame(Athlete = athlete_name, TotalMedailles = total_medals, stringsAsFactors = FALSE))\n  }\n  \n  return(resultats_df)\n}\n\n#Exemple d'utilisation\ncalcul_medailles_individuelles(\"Paavo Nurmi (FIN) (9-3-0)\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n          Athlete TotalMedailles\n1 Paavo Nurmi FIN             12\n```\n:::\n:::\n\n\n-   **Top 3 des athlètes**\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# On applique la fonction précédemment créée calcul_medailles_individuelles\nliste_df <- lapply(data_medailles_sport_ete$Athletes_medailles, calcul_medailles_individuelles)\n\n# Un seul dataframe\ndf_athletes_medailles <- do.call(rbind, liste_df)\n\n# On sélectionne les trois premiers athlètes\ntop_3_athletes <- head(df_athletes_medailles[order(-df_athletes_medailles$TotalMedailles),], 3)\n\ntop_3_athletes\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                   Athlete TotalMedailles\n38      Michael Phelps USA             28\n23    Larissa Latynina URS             18\n18 Edoardo Mangiarotti ITA             13\n```\n:::\n:::\n\n\nLes top 3 des athlètes sont Michael Phelps, Larissa Latynina et Edoardo Mangiarotti avec un total de 28, 18 et 13 médailles respectivement.\n\n-   **Les 3 nationalités les plus représentées, pour toutes les épreuves, au classement du nombre de médailles d’or individuelles reccueillies**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nextraire_nationalite_athlete <- function(texte) {\n  # Extraire les morceaux contenant la nationalité et les médailles d'or\n  matches <- gregexpr(\"\\\\([A-Z]{3}\\\\) \\\\((\\\\d+)-\", texte)\n  nationalites_et_or <- regmatches(texte, matches)\n  \n  # Vecteur pour les nationalités\n  nationalites <- vector(\"list\", length(nationalites_et_or[[1]]))\n  \n  for(i in seq_along(nationalites_et_or[[1]])) {\n    match <- nationalites_et_or[[1]][i]\n    nationalite <- substr(match, 2, 4) # Extraire la nationalité\n    or <- as.numeric(substr(match, 8, nchar(match)-1)) # Extraire le nombre de médailles d'or\n    \n    if(or > 0) { \n      if(!is.null(nationalites[[nationalite]])) {\n        nationalites[[nationalite]] <- nationalites[[nationalite]] + 1\n      } else {\n        nationalites[[nationalite]] <- 1\n      }\n    }\n  }\n  \n  return(unlist(nationalites))\n}\n\nresultats_nationalites <- lapply(data_medailles_sport_ete$Athletes_medailles, extraire_nationalite_athlete)\n\nnationalites_agg <- Reduce(`+`, resultats_nationalites)\n\n# Les 3 nationalités les plus représentées\ntop_3_nationalites <- sort(nationalites_agg, decreasing = TRUE)[1:3]\n\ntop_3_nationalites\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCUB HUN URS \n 35  33  33 \n```\n:::\n:::\n\n\nLe Cuba, L'Hungrie et l'Union Soviétique sont les 3 nationalités les plus représentées.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}