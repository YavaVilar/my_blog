{
  "hash": "745ebdb69e32d93c3d98a3e767e7093d",
  "result": {
    "markdown": "---\ntitle: \"Exercices Semaine 1\"\n---\n\n\n## TD1\n\n\n\n\n\n#### Exercise 2\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Renommer en data_ex\ndata_ex <- read.csv(\"C:/Users/yavav/Downloads/paris-2024-sites-olympiques-et-paralympiques-franciliens (1).csv\", sep=\";\", dec=\",\", quote=\"\\\"\", na.strings = NA)\n\n#Noms et nature des colonnes \nstr(data_ex)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n'data.frame':\t31 obs. of  4 variables:\n $ geo_point                     : chr  \"48.841319, 2.253076\" \"48.924388, 2.359871\" \"48.92467, 2.332428\" \"48.815115, 2.08208\" ...\n $ nom                           : chr  \"Parc des Princes\" \"Stade de France\" \"Village olympique\" \"Château de Versailles\" ...\n $ sites_olympiques_paralympiques: chr  \"Site olympique\" \"Site olympique,Site paralympique\" \"\" \"Site olympique,Site paralympique\" ...\n $ sports                        : chr  \"Football\" \"Athlétisme,Para athlétisme,Rugby\" \"\" \"Sports équestres,Para équitation,Pentathlon moderne\" ...\n```\n:::\n\n```{.r .cell-code}\n#Nombre de lignes \nnrow(data_ex) #31 lignes\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 31\n```\n:::\n:::\n\n\n#### Exercise 3: Combien il y a-t-il de sites olympiques\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- 0\n\nfor (value in data_ex$sites_olympiques_paralympiques) {\n  if (value == \"Site olympique\" | value == \"Site olympique,Site paralympique\") {\n    x <- x + 1\n  } } \n\nprint(paste(\"Número de Sites olympiques:\", x))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Número de Sites olympiques: 26\"\n```\n:::\n:::\n\n\n#### Exercise 4: Combien il y a-t-il de sites paralympiques\n\n\n::: {.cell}\n\n```{.r .cell-code}\ny <- 0\n\nfor (value in data_ex$sites_olympiques_paralympiques) {\n  if (value == \"Site paralympique\" | value == \"Site olympique,Site paralympique\") {\n    y <- y + 1\n  } } \n\nprint(paste(\"Número de Sites paralympiques:\", y))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Número de Sites paralympiques: 19\"\n```\n:::\n:::\n\n\n#### Exercise 5: Quels sont les sites qui aceuillent plusieurs disciplines sportives\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Ce code permet d'identifier le nom des sites qui aceuillent plus d'un sport\nsites_plusieurs_sports <- data_ex[grepl(\",\", data_ex$sports), c(\"nom\")]\nsites_plusieurs_sports\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"Stade de France\"                                \n [2] \"Château de Versailles\"                          \n [3] \"Grand Palais\"                                   \n [4] \"Invalides\"                                      \n [5] \"Pont d'Iéna\"                                    \n [6] \"Arena Bercy\"                                    \n [7] \"Arena Paris nord\"                               \n [8] \"Arena Paris Sud 6 (Porte de Versailles)\"        \n [9] \"Stade de la Concorde\"                           \n[10] \"Arena Champs de Mars\"                           \n[11] \"Stade Tour Eiffel\"                              \n[12] \"Arena La Chapelle\"                              \n[13] \"Centre aquatique\"                               \n[14] \"Arena Paris Sud 1 (Porte de Versailles)\"        \n[15] \"Arena Paris Sud 4 (Porte de Versailles)\"        \n[16] \"La Défense Arena\"                               \n[17] \"Stade nautique\"                                 \n[18] \"Vélodrome National de Saint-Quentin-en-Yvelines\"\n[19] \"Stade Roland Garros\"                            \n```\n:::\n:::\n\n\n#### Exercise 6: Quels sont les disciplines para-olympiques acceuillies dans ces sites franciliens\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndisciplines_plusieurs_sports <- data_ex[grepl(\",\", data_ex$sports), c(\"nom\", \"sports\")] \ndisciplines_plusieurs_sports\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                                               nom\n2                                  Stade de France\n4                            Château de Versailles\n8                                     Grand Palais\n9                                        Invalides\n11                                     Pont d'Iéna\n12                                     Arena Bercy\n13                                Arena Paris nord\n14         Arena Paris Sud 6 (Porte de Versailles)\n15                            Stade de la Concorde\n17                            Arena Champs de Mars\n18                               Stade Tour Eiffel\n20                               Arena La Chapelle\n22                                Centre aquatique\n23         Arena Paris Sud 1 (Porte de Versailles)\n24         Arena Paris Sud 4 (Porte de Versailles)\n26                                La Défense Arena\n27                                  Stade nautique\n29 Vélodrome National de Saint-Quentin-en-Yvelines\n30                             Stade Roland Garros\n                                                             sports\n2                                  Athlétisme,Para athlétisme,Rugby\n4               Sports équestres,Para équitation,Pentathlon moderne\n8                 Escrime,Escrime fauteuil,Taekwondo,Para taekwondo\n9        Tir à l'arc,Para tir à l'arc,Athlétisme,Cyclisme sur route\n11                                    Cyclisme sur route,Athlétisme\n12     Basketball,Basket fauteuil,Gymnastique artistique,trampoline\n13                Boxe,Escrime,Pentathlon moderne,Volley-ball assis\n14                                  Haltérophilie,Handball,Goalball\n15                 Basketball 3x3,BMX freestyle,Breaking,Skateboard\n17                              Judo,Para judo,Lutte,Rugby fauteuil\n18                                     Volleyball de plage,Cécifoot\n20 Badminton,Para Badminton,Gymnastique rythmique,Para powerlifting\n22                          Natation artistique,Plongeon,Water-polo\n23                                                Volleyball,Boccia\n24                             Tennis de table,Para tennis de table\n26                                Natation,Para natation,Water-polo\n27                              Canoë,Para canoë,Aviron,Para aviron\n29                       Cyclisme sur piste,Para cyclisme sur piste\n30                                      Tennis,Tennis fauteuil,Boxe\n```\n:::\n:::\n\n\n#### Exercise 7: Sites qui aceuillent le plus de disciples différentes\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmax_sports <- max(sapply(strsplit(data_ex$sports, \",\"),length))\n\nfiles_max_sports <- which(sapply(strsplit(data_ex$sports, \",\"),length)==max_sports)\n\ndata_max_sports <- data_ex[files_max_sports, c(\"nom\", \"sports\")]\n\ndata_max_sports\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                    nom\n8          Grand Palais\n9             Invalides\n12          Arena Bercy\n13     Arena Paris nord\n15 Stade de la Concorde\n17 Arena Champs de Mars\n20    Arena La Chapelle\n27       Stade nautique\n                                                             sports\n8                 Escrime,Escrime fauteuil,Taekwondo,Para taekwondo\n9        Tir à l'arc,Para tir à l'arc,Athlétisme,Cyclisme sur route\n12     Basketball,Basket fauteuil,Gymnastique artistique,trampoline\n13                Boxe,Escrime,Pentathlon moderne,Volley-ball assis\n15                 Basketball 3x3,BMX freestyle,Breaking,Skateboard\n17                              Judo,Para judo,Lutte,Rugby fauteuil\n20 Badminton,Para Badminton,Gymnastique rythmique,Para powerlifting\n27                              Canoë,Para canoë,Aviron,Para aviron\n```\n:::\n:::\n\n\n#### Exercise 8: Quel discipline aura lieu sur le plus grand nombre de sites ? Quels sont ces sites ?\n\n\n::: {.cell}\n\n:::\n\n\n#### Exercise 9: A vol d’oiseau, quels sont les deux sites les plus proches ?\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Libraires \n\nlibrary(geosphere)\nlibrary(tidyr)\n\n#Séparer les coordonnées géographiques en deux colonnes par la virgule \n\ndata_ex <- separate(data_ex, geo_point, into = c(\"lat\", \"long\"), sep = \", \")\n\n# Fonction pour calculer la distance euclidienne\n\ndata_ex$lat <- as.numeric(data_ex$lat)\ndata_ex$long <- as.numeric(data_ex$long)\n\ndistances <- distHaversine(data_ex[, c(\"long\", \"lat\")])\nprint(distances)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 12109.0289  2007.5022 22017.3512 28908.6007  1204.2823 36658.5531\n [7] 26702.8086   422.2544 11450.5703 13052.7520  6674.7313 18001.9809\n[13] 22981.5082  4582.2876  8949.4822  9269.0396   436.5820 20677.9533\n[19] 27022.4177 10476.8609 12176.4034 11437.7799   419.6006  5441.5332\n[25]  9902.1865 30003.3283 42913.1029  5092.1872 16782.0752 23146.9519\n```\n:::\n\n```{.r .cell-code}\n# Matrice pour garder les distances\ndistances <- matrix(NA, nrow = nrow(data_ex), ncol = nrow(data_ex))\n\n# Calculer les distances entre toutes les coordonnées avec un boucle \nfor (i in 1:(nrow(data_ex) - 1)) {\n  for (j in (i + 1):nrow(data_ex)) {\n    distances[i, j] <- distHaversine(\n      c(data_ex$lat[i], data_ex$long[i]),\n      c(data_ex$lat[j], data_ex$long[j])\n    )\n    distances[j, i] <- distances[i, j]  # Symétrie\n  }\n}\n\n# Convertir la matirce en dataframe\ndistancies_df <- as.data.frame(distances)\n\n# Imprimer le résultat\nprint(distancies_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n           V1         V2        V3        V4         V5        V6        V7\n1          NA 15056.7389 12805.617 19257.081 22271.8538 20748.364 32305.277\n2  15056.7389         NA  3055.102 33226.672  7547.5784  5838.553 46203.555\n3  12805.6173  3055.1018        NA 30416.632 10500.7457  8728.774 43340.214\n4  19257.0811 33226.6717 30416.632        NA 40755.4566 39064.069 13072.796\n5  22271.8538  7547.5784 10500.746 40755.457         NA  1832.738 53746.488\n6  20748.3645  5838.5527  8728.774 39064.069  1832.7378        NA 52032.174\n7  32305.2766 46203.5545 43340.214 13072.796 53746.4884 52032.174        NA\n8   7154.1777  8368.7102  6891.563 26258.120 15228.0109 13794.367 39330.060\n9   7089.9756  8641.7036  7260.763 26260.184 15396.9360 13993.974 39328.977\n10 21469.1770  6894.1107  9898.861 40041.691   912.7678  1592.056 53049.925\n11  4578.5630 10747.8302  8874.430 23746.686 17774.3390 16305.117 36813.557\n12 13964.8487  9759.0469 10855.433 33100.557 12818.2902 12245.605 46064.777\n13 32963.0364 18486.5352 21426.961 51666.843 10939.6176 12699.394 64674.868\n14  4393.8403 13048.3407 11543.918 23288.038 19614.5744 18294.679 36250.926\n15  8050.2199  7829.3426  6689.150 27204.950 14464.9900 13085.188 40275.291\n16  9967.9373 12270.2605  9219.952 22683.744 19523.9643 17701.840 35184.119\n17  5470.7669 10206.5402  8576.444 24697.137 17057.1310 15638.749 37757.950\n18  5104.3510 10306.0857  8522.563 24279.126 17280.7179 15825.708 37346.021\n19 25038.3569 39276.8372 36494.174  6113.760 46791.1543 45115.370  7454.627\n20 13723.9942  2778.3953  4305.937 32522.100  8590.2256  7209.139 45577.401\n21   835.1916 15123.5382 12998.419 19639.369 22230.2205 20747.462 32657.837\n22 14612.9677   494.5346  2574.906 32738.840  8040.4207  6325.288 45712.812\n23  3606.3897 13286.8548 11619.058 22570.579 20012.5928 18647.474 35553.013\n24  4198.3142 13103.4959 11557.563 23109.510 19711.1586 18379.704 36077.336\n25 11082.6533  7569.8078  7833.045 30339.659 12687.3147 11634.908 43384.807\n26  6580.4768 14837.6230 11881.099 18717.878 22369.4745 20609.081 31515.356\n27 42731.8665 31546.9111 34540.397 61925.842 25263.9806 26997.171 74882.553\n28 22129.9359 37025.2300 34471.367  7155.132 44375.4783 42805.960 12723.117\n29 24990.3824 39217.2381 36432.290  6045.720 46732.7044 45055.788  7481.905\n30  1075.4705 15348.5251 12948.414 18541.332 22674.6397 21105.538 31608.877\n31 33563.9961 20815.6222 23865.876 52780.299 14034.3137 15821.176 65849.102\n           V8         V9        V10        V11       V12       V13        V14\n1   7154.1777  7089.9756 21469.1770  4578.5630 13964.849 32963.036  4393.8403\n2   8368.7102  8641.7036  6894.1107 10747.8302  9759.047 18486.535 13048.3407\n3   6891.5627  7260.7629  9898.8609  8874.4300 10855.433 21426.961 11543.9176\n4  26258.1202 26260.1835 40041.6906 23746.6865 33100.557 51666.843 23288.0381\n5  15228.0109 15396.9360   912.7678 17774.3390 12818.290 10939.618 19614.5744\n6  13794.3670 13993.9745  1592.0558 16305.1173 12245.605 12699.394 18294.6793\n7  39330.0598 39328.9768 53049.9246 36813.5571 46064.777 64674.868 36250.9261\n8          NA   427.4280 14398.7550  2578.9788  7963.004 25825.025  4712.2116\n9    427.4280         NA 14557.8613  2519.9293  7727.262 25936.700  4409.2400\n10 14398.7550 14557.8613         NA 16954.3051 11914.035 11625.971 18749.9696\n11  2578.9788  2519.9293 16954.3051         NA  9891.422 28402.558  2963.7697\n12  7963.0039  7727.2621 11914.0354  9891.4218        NA 21516.849  9816.2954\n13 25825.0254 25936.7004 11625.9710 28402.5580 21516.849        NA 29913.6785\n14  4712.2116  4409.2400 18749.9696  2963.7697  9816.295 29913.678         NA\n15   980.7896   961.6114 13620.4242  3476.2888  7046.447 24979.538  5241.7774\n16 10025.8846 10391.8434 19007.5386  9501.7749 17616.917 30319.074 12149.3574\n17  1849.3203  1666.2102 16220.8678  1021.5252  8869.957 27600.340  2971.3433\n18  2064.3110  1988.8923 16456.1935   532.4663  9404.021 27888.784  3127.1572\n19 32128.3513 32104.6438 46064.2776 29584.7660 38691.770 57683.557 28889.2971\n20  6638.7599  6809.1036  7761.0183  9194.1802  7016.752 19254.989 11085.6168\n21  7024.6367  6911.7125 21411.5436  4457.2815 13490.057 32845.139  3770.2012\n22  7989.1031  8274.7127  7388.6434 10335.3530  9773.131 18979.707 12683.9395\n23  4918.3403  4667.7734 19158.7481  2810.3001 10530.691 30406.154   788.7158\n24  4751.9835  4461.7925 18849.1679  2906.4876  9992.586 30034.730   195.7977\n25  4460.9679  4294.2778 11786.1549  6681.1681  3631.786 22601.590  7398.7201\n26  9777.4614 10010.2954 21731.5399  8146.4600 17735.215 33304.498 10008.3272\n27 36066.4446 35973.1166 25439.3030 38408.0636 28826.378 17814.316 38642.2014\n28 29268.4081 29170.5973 43586.0412 26689.8265 35064.482 55091.120 25465.1629\n29 32077.7419 32055.0558 46006.6733 29535.2263 38651.322 57626.489 28847.6012\n30  7733.4610  7720.2781 21892.3214  5205.3645 14836.317 33442.153  5410.8305\n31 26527.0114 26520.3031 14313.4527 29035.7208 20357.071  7341.222 29866.1581\n          V15       V16        V17        V18         V19       V20        V21\n1   8050.2199  9967.937  5470.7669  5104.3510 25038.35685 13723.994   835.1916\n2   7829.3426 12270.260 10206.5402 10306.0857 39276.83715  2778.395 15123.5382\n3   6689.1499  9219.952  8576.4444  8522.5626 36494.17399  4305.937 12998.4193\n4  27204.9501 22683.744 24697.1367 24279.1264  6113.75995 32522.100 19639.3693\n5  14464.9900 19523.964 17057.1310 17280.7179 46791.15430  8590.226 22230.2205\n6  13085.1878 17701.840 15638.7490 15825.7078 45115.37030  7209.139 20747.4619\n7  40275.2910 35184.119 37757.9500 37346.0206  7454.62705 45577.401 32657.8366\n8    980.7896 10025.885  1849.3203  2064.3110 32128.35131  6638.760  7024.6367\n9    961.6114 10391.843  1666.2102  1988.8923 32104.64382  6809.104  6911.7125\n10 13620.4242 19007.539 16220.8678 16456.1935 46064.27757  7761.018 21411.5436\n11  3476.2888  9501.775  1021.5252   532.4663 29584.76605  9194.180  4457.2815\n12  7046.4465 17616.917  8869.9570  9404.0208 38691.76964  7016.752 13490.0566\n13 24979.5383 30319.074 27600.3401 27888.7835 57683.55696 19254.989 32845.1391\n14  5241.7774 12149.357  2971.3433  3127.1572 28889.29714 11085.617  3770.2012\n15         NA 10763.366  2620.8057  2946.9000 33058.49460  5885.300  7871.8150\n16 10763.3665        NA 10188.1278  9674.7744 28784.98450 12943.899 10679.7358\n17  2620.8057 10188.128         NA   567.5872 30507.16918  8467.326  5254.7685\n18  2946.9000  9674.774   567.5872         NA 30116.33966  8695.175  4960.7198\n19 33058.4946 28784.984 30507.1692 30116.3397          NA 38489.515 25348.9876\n20  5885.2997 12943.899  8467.3255  8695.1753 38489.51460        NA 13651.4314\n21  7871.8150 10679.736  5254.7685  4960.7198 25348.98756 13651.431         NA\n22  7485.0504 11794.349  9818.7447  9901.8031 38791.12163  2756.517 14692.6679\n23  5562.2950 11634.328  3087.5255  3099.4224 28205.86047 11445.371  2998.9915\n24  5312.2004 12018.707  2981.1649  3101.6038 28719.14763 11170.782  3578.0437\n25  3500.3702 13987.188  5683.3880  6159.5592 36092.62635  4879.972 10744.4651\n26 10720.3469  4512.378  9103.3590  8536.0470 24829.21961 14710.673  7400.6044\n27 35086.4426 43701.237 37408.7929 37884.9860 67491.11691 30844.631 42298.6077\n28 30131.2286 27836.062 27514.2770 27206.0948  6098.00408 35852.217 22259.7607\n29 33008.6154 28713.333 30458.7599 30066.8779    91.69166 38434.833 25303.4409\n30  8668.8671  9306.441  6165.2474  5737.7972 24394.95828 14187.335  1890.5226\n31 25575.8047 33085.347 28098.0622 28503.2715 58601.77829 20589.854 33267.4788\n          V22        V23        V24       V25       V26      V27       V28\n1  14612.9677  3606.3897  4198.3142 11082.653  6580.477 42731.87 22129.936\n2    494.5346 13286.8548 13103.4959  7569.808 14837.623 31546.91 37025.230\n3   2574.9060 11619.0583 11557.5627  7833.045 11881.099 34540.40 34471.367\n4  32738.8397 22570.5787 23109.5099 30339.659 18717.878 61925.84  7155.132\n5   8040.4207 20012.5928 19711.1586 12687.315 22369.475 25263.98 44375.478\n6   6325.2883 18647.4736 18379.7044 11634.908 20609.081 26997.17 42805.960\n7  45712.8121 35553.0128 36077.3361 43384.807 31515.356 74882.55 12723.117\n8   7989.1031  4918.3403  4751.9835  4460.968  9777.461 36066.44 29268.408\n9   8274.7127  4667.7734  4461.7925  4294.278 10010.295 35973.12 29170.597\n10  7388.6434 19158.7481 18849.1679 11786.155 21731.540 25439.30 43586.041\n11 10335.3530  2810.3001  2906.4876  6681.168  8146.460 38408.06 26689.826\n12  9773.1308 10530.6913  9992.5860  3631.786 17735.215 28826.38 35064.482\n13 18979.7072 30406.1536 30034.7299 22601.590 33304.498 17814.32 55091.120\n14 12683.9395   788.7158   195.7977  7398.720 10008.327 38642.20 25465.163\n15  7485.0504  5562.2950  5312.2004  3500.370 10720.347 35086.44 30131.229\n16 11794.3490 11634.3284 12018.7075 13987.188  4512.378 43701.24 27836.062\n17  9818.7447  3087.5255  2981.1649  5683.388  9103.359 37408.79 27514.277\n18  9901.8031  3099.4224  3101.6038  6159.559  8536.047 37884.99 27206.095\n19 38791.1216 28205.8605 28719.1476 36092.626 24829.220 67491.12  6098.004\n20  2756.5174 11445.3715 11170.7816  4879.972 14710.673 30844.63 35852.217\n21 14692.6679  2998.9915  3578.0437 10744.465  7400.604 42298.61 22259.761\n22         NA 12903.6370 12734.2435  7421.643 14343.098 31996.71 36558.828\n23 12903.6370         NA   592.9181  7981.963  9312.840 39355.28 24868.186\n24 12734.2435   592.9181         NA  7539.999  9834.345 38818.94 25316.006\n25  7421.6430  7981.9634  7539.9991        NA 14218.988 31727.11 32849.176\n26 14343.0980  9312.8397  9834.3453 14218.988        NA 45422.07 23490.009\n27 31996.7129 39355.2833 38818.9359 31727.114 45422.066       NA 63604.347\n28 36558.8279 24868.1861 25316.0063 32849.176 23490.009 63604.35        NA\n29 38731.3574 28163.0442 28677.1777 36046.692 24762.464 67452.65  6135.202\n30 14890.7125  4622.3076  5215.0745 11837.928  5657.121 43543.37 21703.185\n31 21291.1278 30492.8536 30021.0016 22530.340 35295.471 11400.29 55319.427\n           V29       V30       V31\n1  24990.38243  1075.470 33563.996\n2  39217.23807 15348.525 20815.622\n3  36432.28993 12948.414 23865.876\n4   6045.72039 18541.332 52780.299\n5  46732.70442 22674.640 14034.314\n6  45055.78826 21105.538 15821.176\n7   7481.90543 31608.877 65849.102\n8  32077.74192  7733.461 26527.011\n9  32055.05576  7720.278 26520.303\n10 46006.67331 21892.321 14313.453\n11 29535.22626  5205.364 29035.721\n12 38651.32188 14836.317 20357.071\n13 57626.48926 33442.153  7341.222\n14 28847.60120  5410.831 29866.158\n15 33008.61536  8668.867 25575.805\n16 28713.33263  9306.441 33085.347\n17 30458.75987  6165.247 28098.062\n18 30066.87785  5737.797 28503.271\n19    91.69166 24394.958 58601.778\n20 38434.83292 14187.335 20589.854\n21 25303.44092  1890.523 33267.479\n22 38731.35738 14890.712 21291.128\n23 28163.04421  4622.308 30492.854\n24 28677.17774  5215.075 30021.002\n25 36046.69222 11837.928 22530.340\n26 24762.46357  5657.121 35295.471\n27 67452.65364 43543.366 11400.286\n28  6135.20231 21703.185 55319.427\n29          NA 24344.289 58554.135\n30 24344.28919        NA 34240.231\n31 58554.13520 34240.231        NA\n```\n:::\n\n```{.r .cell-code}\n#Le sites les plus proches\nmin_distance <- min(distancies_df, na.rm=TRUE)\nmin_distance \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 91.69166\n```\n:::\n\n```{.r .cell-code}\n#Min distances\nmin_distannce <- which(distancies_df==min_distance, arr.ind=TRUE)\nmin_distannce\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     row col\n[1,]  29  19\n[2,]  19  29\n```\n:::\n:::\n\n\nOn observe que la distance minimale est de 91.69 km, identifiée par min_distance. Min_distannce permet d'identifier la ligne et la colonne de la valeur 91.69 au sein de la matrice. Cela correspond aux noms des sites des colonnes 19 et 29 du dataframe data_ex. On observe que Stade BMX de Saint-Quentin-en-Yvelines et Vélodrome National de Saint-Quentin-en-Yvelines sont les sites les plus proches.\n\n#### Exercise 10: Quels sont les sites les plus éloignés\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmax_distance <- max(distancies_df, na.rm=TRUE)\nprint(max_distance)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 74882.55\n```\n:::\n\n```{.r .cell-code}\nmax_distannce <- which(distancies_df==max_distance, arr.ind=TRUE)\nmax_distannce\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     row col\n[1,]  27   7\n[2,]   7  27\n```\n:::\n:::\n\n\nOn observe que Colline d'Elancourt (7) et Stade Nautique (27) sont les sites les plus éloignés avec une distance de 74882.55 km.\n\n#### Exercise 11:\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}