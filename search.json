[
  {
    "objectID": "posts/TD3 quarto/TD3.html",
    "href": "posts/TD3 quarto/TD3.html",
    "title": "Exercices Semaine 3",
    "section": "",
    "text": "Ce tutorial se concentre sur l’apprentissage d’importation des fichiers avec des formats permettant de gérer de grandes bases de données. De même, les librairies dplyr, tidyr, string et lubridate seront exploitées pour analyser les informations relatives aux Jeux Olympiques historiques.\n\ninstall.packages(\"RSQLite\")\n\n\nLire le fichier parquet avec la librairie arrow, dimension et nom des colonnes\n\n\ndata_parquet &lt;- arrow::read_parquet(\"C:/Users/yavav/OneDrive - Universitat de València/tokyo_athletes.parquet\")\ndata_parquet &lt;- as.data.frame(data_parquet)\n\nView(data_parquet)\n\n\ndim(data_parquet) #Trois variables et 11085 colonnes\n\n[1] 11085     3\n\nstr(data_parquet) #Colonnes présentes: Name, NOC, Discipline\n\n'data.frame':   11085 obs. of  3 variables:\n $ Name      : chr  \"AALERUD Katrine\" \"ABAD Nestor\" \"ABAGNALE Giovanni\" \"ABALDE Alberto\" ...\n $ NOC       : chr  \"Norway\" \"Spain\" \"Italy\" \"Spain\" ...\n $ Discipline: chr  \"Cycling Road\" \"Artistic Gymnastics\" \"Rowing\" \"Basketball\" ...\n\n\n\nLire le fichier json avec la libraire jsonlite, dimension et nom des colonnes\n\n\nchemin_acces &lt;- \"C:/Users/yavav/OneDrive - Universitat de València/olympics_athletes.json\"\n\nlibrary(jsonlite)\ndatos_json &lt;- fromJSON(chemin_acces)\ndatos_json &lt;- as.data.frame(datos_json)\n\n\ndim(datos_json) #269731 lignes et 13 colonnes\n\n[1] 269731     13\n\nstr(datos_json) #On observe le nom des différentes colonnes\n\n'data.frame':   269731 obs. of  13 variables:\n $ ID    : int  1 2 3 4 5 5 5 5 5 5 ...\n $ Name  : chr  \"A Dijiang\" \"A Lamusi\" \"Gunnar Nielsen Aaby\" \"Edgar Lindenau Aabye\" ...\n $ Sex   : chr  \"M\" \"M\" \"M\" \"M\" ...\n $ Age   : int  24 23 24 34 21 21 25 25 27 27 ...\n $ Height: int  180 170 NA NA 185 185 185 185 185 185 ...\n $ Weight: num  80 60 NA NA 82 82 82 82 82 82 ...\n $ Team  : chr  \"China\" \"China\" \"Denmark\" \"Denmark/Sweden\" ...\n $ NOC   : chr  \"CHN\" \"CHN\" \"DEN\" \"DEN\" ...\n $ Games : chr  \"1992 Summer\" \"2012 Summer\" \"1920 Summer\" \"1900 Summer\" ...\n $ City  : chr  \"Barcelona\" \"London\" \"Antwerpen\" \"Paris\" ...\n $ Sport : chr  \"Basketball\" \"Judo\" \"Football\" \"Tug-Of-War\" ...\n $ Event : chr  \"Basketball Men's Basketball\" \"Judo Men's Extra-Lightweight\" \"Football Men's Football\" \"Tug-Of-War Men's Tug-Of-War\" ...\n $ Medal : chr  NA NA NA \"Gold\" ...\n\n\n\nConnexion à la base de données SQL site avec dbConnect\n\n\nlibrary(RSQLite)\n\ncon &lt;- dbConnect(SQLite(), dbname =\"C:/Users/yavav/Documents/R avancé et Git/data.sqlite\")\n\n\nCréer deux nouvelles tables avec dbListTables\n\n\ntables &lt;- dbListTables(con)\nprint(tables) ##Tables: Tokyo_medals et Tokyo_teams\n\n[1] \"C:/Users/yavav/OneDrive - Universitat de València/__MACOSX/olympics_athletes.json\"\n[2] \"olympics_athletes\"                                                                \n[3] \"tokyo_athletes\"                                                                   \n[4] \"tokyo_medals\"                                                                     \n[5] \"tokyo_teams\"                                                                      \n\n\n\nlibrary(RSQLite)\nlibrary(DBI)\ndbWriteTable(con, \"tokyo_athletes\", data_parquet, overwrite=TRUE)\ndbWriteTable(con, \"olympics_athletes\", datos_json, overwrite=TRUE)\n\n\nInspecter la table olympics_athletes en utilisant la fonction dbListFields\n\n\ncolonnes_olympics_athletes &lt;- dbListFields(con, \"olympics_athletes\")\n\n# Afficher la liste des colonnes\nprint(colonnes_olympics_athletes)\n\n [1] \"ID\"     \"Name\"   \"Sex\"    \"Age\"    \"Height\" \"Weight\" \"Team\"   \"NOC\"   \n [9] \"Games\"  \"City\"   \"Sport\"  \"Event\"  \"Medal\" \n\ncolonnes_tokyo_athletes &lt;- dbListFields(con, \"tokyo_athletes\")\n\n# Afficher la liste des colonnes\nprint(colonnes_tokyo_athletes)\n\n[1] \"Name\"       \"NOC\"        \"Discipline\"\n\n\n\nImporter cette table depuis la base de données en utilisant la fonction dbReadTable. Convertir la table en tibble.\n\n\n##Olympics\n\nlibrary(tibble)\n\n#Lire la table depuis la base de données\ntable_olympics_athletes &lt;- dbReadTable(con, \"olympics_athletes\")\n\n# Convertir la table en tibble\ntibble_olympics_athletes &lt;- as_tibble(table_olympics_athletes)\n\n##Athletes\n\n#Lire la table depuis la base de données\ntable_tokyo_athletes &lt;- dbReadTable(con, \"tokyo_athletes\")\n\n# Convertir la table en tibble\ntibble_tokyo_athletes &lt;- as_tibble(table_tokyo_athletes)\n\nLibraires dplyr, tidyr\n\nConvertir la colonne Sex en variable catégorielle avec la fonction mutate\n\n\n#Importation des libraires \nlibrary(dplyr)\nlibrary(tidyr)\n\n\ntibble_olympics_athletes &lt;- tibble_olympics_athletes %&gt;% mutate(Sex = as.factor(Sex))\n\n\nCréer deux colonnes à partir de la colonne Games\n\n\nhelp(\"separate_wider_delim\")\n\nseparate_wider_delim(tibble_olympics_athletes, cols = Games, delim= \" \", names=c(\"Year\", \"isSummer\"), cols_remove = FALSE)\n\n# A tibble: 269,731 × 15\n      ID Name   Sex     Age Height Weight Team  NOC   Year  isSummer Games City \n   &lt;int&gt; &lt;chr&gt;  &lt;fct&gt; &lt;int&gt;  &lt;int&gt;  &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;    &lt;chr&gt; &lt;chr&gt;\n 1     1 A Dij… M        24    180     80 China CHN   1992  Summer   1992… Barc…\n 2     2 A Lam… M        23    170     60 China CHN   2012  Summer   2012… Lond…\n 3     3 Gunna… M        24     NA     NA Denm… DEN   1920  Summer   1920… Antw…\n 4     4 Edgar… M        34     NA     NA Denm… DEN   1900  Summer   1900… Paris\n 5     5 Chris… F        21    185     82 Neth… NED   1988  Winter   1988… Calg…\n 6     5 Chris… F        21    185     82 Neth… NED   1988  Winter   1988… Calg…\n 7     5 Chris… F        25    185     82 Neth… NED   1992  Winter   1992… Albe…\n 8     5 Chris… F        25    185     82 Neth… NED   1992  Winter   1992… Albe…\n 9     5 Chris… F        27    185     82 Neth… NED   1994  Winter   1994… Lill…\n10     5 Chris… F        27    185     82 Neth… NED   1994  Winter   1994… Lill…\n# ℹ 269,721 more rows\n# ℹ 3 more variables: Sport &lt;chr&gt;, Event &lt;chr&gt;, Medal &lt;chr&gt;\n\n\n\nCréer deux colonnes à partir de la colonne Games. La première colonne Year sera une colonne de type integer contenant l’année des jeux. La deuxième colonne isSummer sera une colonne booléenne qui indiquera si les jeux sont des jeux d’été ou d’hiver\n\n\nany(is.na(tibble_olympics_athletes$Age)) #Ce code permet de vérifier la présence des NA's au sein de la colonne Age\n\n[1] TRUE\n\ntibble_olympics_athletes %&gt;% group_by(Games) %&gt;%\n  summarise(mean_age=mean(Age,na.rm=TRUE)) #Ce code calcule la moyenne d'age pour chacune des éditions des JO, en excluant les valeurs manquantes du calcul. \n\n# A tibble: 51 × 2\n   Games       mean_age\n   &lt;chr&gt;          &lt;dbl&gt;\n 1 1896 Summer     23.6\n 2 1900 Summer     28.9\n 3 1904 Summer     26.7\n 4 1906 Summer     27.1\n 5 1908 Summer     27.0\n 6 1912 Summer     27.5\n 7 1920 Summer     29.3\n 8 1924 Summer     28.1\n 9 1924 Winter     27.6\n10 1928 Summer     28.0\n# ℹ 41 more rows\n\n\n\nMoyenne d’age des athletes pour chacune des éditions des JO d’été. Edition qui a compté avec les athlètes les plus jeunes ? Les plus vieux ?\n\n\ntibble_olympics_athletes %&gt;% group_by(Games) %&gt;%\n  summarise(mean_age=mean(Age,na.rm=TRUE)) %&gt;% \n  arrange(mean_age) %&gt;% slice(1) #Cela permet d'ordonner de manière croissante les moyennes d'âge ainsi que de sélectionner la première ligne (les plus jeunes)\n\n# A tibble: 1 × 2\n  Games       mean_age\n  &lt;chr&gt;          &lt;dbl&gt;\n1 1984 Winter     23.4\n\ntibble_olympics_athletes %&gt;% group_by(Games) %&gt;%\n  summarise(mean_age=mean(Age,na.rm=TRUE)) %&gt;% \n  arrange(desc(mean_age)) %&gt;% slice(1) #Cela ordonne de manière décroissante pour trouver les plus âgés \n\n# A tibble: 1 × 2\n  Games       mean_age\n  &lt;chr&gt;          &lt;dbl&gt;\n1 1932 Summer     30.2\n\n\nOn observe que l’édition qui a compté avec les athlètes les plus jeunes ont été les jeux d’hiver 1984, tandis que celle avec les plus vieux, les jeux d’été en 1932.\n\nDiscipline des JO d’été dont la taille des athlètes féminines est la plus grande ? Quelle a été cette discipline au cours de chacune des éditions ? Nombre de fois où chaque discipline a été la discipline avec les plus grandes athlètes\n\n\ntibble_olympics_athletes %&gt;% filter(Sex==\"F\") %&gt;% arrange(desc(Height)) %&gt;% slice(1) %&gt;% select(Height, Sport) #On filtre les femmes, on ordonne et sélectionne la ligne ainsi que les variables d'intérêt. \n\n# A tibble: 1 × 2\n  Height Sport     \n   &lt;int&gt; &lt;chr&gt;     \n1    213 Basketball\n\n\nLa discipline dont la taille des athlètes féminines est la plus grande est le basketball.\n\ntibble_olympics_athletes %&gt;% filter(Sex==\"F\" & !is.na(Height)) %&gt;% group_by(Games) %&gt;% \n  arrange(desc(Height)) %&gt;% slice(1) %&gt;% select(Games, Height, Sport) #On filtre pour les femmes et pour la taille sans valeurs manquantes, puis on calcule la taille plus grande pour chaque game et on sélectionne la colonne du sport correspondant. \n\n# A tibble: 45 × 3\n# Groups:   Games [45]\n   Games       Height Sport         \n   &lt;chr&gt;        &lt;int&gt; &lt;chr&gt;         \n 1 1920 Summer    175 Diving        \n 2 1924 Summer    175 Fencing       \n 3 1924 Winter    165 Figure Skating\n 4 1928 Summer    183 Fencing       \n 5 1928 Winter    165 Figure Skating\n 6 1932 Summer    183 Fencing       \n 7 1932 Winter    168 Figure Skating\n 8 1936 Summer    183 Fencing       \n 9 1936 Winter    168 Figure Skating\n10 1948 Summer    180 Athletics     \n# ℹ 35 more rows\n\n\n\ntibble_olympics_athletes %&gt;% filter(Sex==\"F\" & !is.na(Height)) %&gt;% group_by(Games) %&gt;% \n  arrange(desc(Height)) %&gt;% slice(1) %&gt;% select(Games, Height, Sport) %&gt;% pull(Sport) %&gt;% table() #On extrait la colonne sport et fait un tablau de fréquence. \n\n.\n       Alpine Skiing            Athletics           Basketball \n                   3                    5                    9 \n           Bobsleigh Cross Country Skiing               Diving \n                   3                    4                    1 \n             Fencing       Figure Skating           Ice Hockey \n                   4                    4                    1 \n                Luge        Speed Skating             Swimming \n                   3                    4                    1 \n          Volleyball \n                   3 \n\n\nstringr, lubridate\nOn dispose du texte suivant :\n\ntexte &lt;- \"Les jeux olympiques d’été se déroulent normalement tous les 4 ans, durant les mois de Juillet et Août. Les jeux de Rio ont eu lieu du 5 Août 2016 au 20 Août 2016, ceux de Tokyo du 23 Juillet 2021 au 8 Août 2021, et ceux de Paris auront lieu du 26 Juillet 2024 au 11 Août 2024. Plus de 10000 athlètes sont attendus du monde\nentier à Paris.\"\n\n\nExtraire les dates des différentes éditions des JO\n\n\n#Chargement de librairie \nlibrary(stringr)\n\n\nstr_extract_all(texte, \"\\\\b(\\\\d{1,2} \\\\w+ \\\\d{4})\\\\b\")\n\n[[1]]\n[1] \"5 Août 2016\"     \"20 Août 2016\"    \"23 Juillet 2021\" \"8 Août 2021\"    \n[5] \"26 Juillet 2024\" \"11 Août 2024\"   \n\n\n\nRemplacer les noms des mois par leur numéro pour rendre ces éléments convertibles en date en utilisant la fonction str_replace\n\n\nstr_replace_all(texte, c(\"Juillet\"=\"7\", \"Août\"=\"8\"))\n\n[1] \"Les jeux olympiques d’été se déroulent normalement tous les 4 ans, durant les mois de 7 et 8. Les jeux de Rio ont eu lieu du 5 8 2016 au 20 8 2016, ceux de Tokyo du 23 7 2021 au 8 8 2021, et ceux de Paris auront lieu du 26 7 2024 au 11 8 2024. Plus de 10000 athlètes sont attendus du monde\\nentier à Paris.\"\n\n\n\nlibrary(lubridate)\n\n\npatron_dates &lt;- \"\\\\b(\\\\d{1,2} \\\\w+ \\\\d{4})\\\\b\"\n\n# Extraire et convertir toutes les dates\ndates &lt;- str_extract_all(texte, patron_dates) %&gt;%\n  lapply(function(matches) {\n    dmy(matches)\n  })\n\n#Imprimer le résultat\nprint(dates)\n\n[[1]]\n[1] \"2016-08-05\" \"2016-08-20\" \"2021-07-23\" \"2021-08-08\" \"2024-07-26\"\n[6] \"2024-08-11\"\n\n\n\nCombien de jours ont séparés les éditions de Rio et Tokyo ? Et sépareront les éditions de Tokyo et de Paris ? Faites le même calcul en semaines.\n\n\nRio_Tokyo &lt;- difftime(dates[[1]][3], dates[[1]][2], units = \"days\") #Diff entre le troisième et deuxième élément de la liste dates en jour\nprint(Rio_Tokyo)\n\nTime difference of 1798 days\n\nTokyo_Paris &lt;- difftime(dates[[1]][5], dates[[1]][4], units = \"days\") #Diff entre le cinquième et sixième élément de la liste dates en jour\nprint(Tokyo_Paris)\n\nTime difference of 1083 days\n\nRio_Tokyo_semaines &lt;- difftime(dates[[1]][3], dates[[1]][2], units = \"weeks\") #Diff entre le troisième et deuxième élément de la liste dates en semaines\nprint(Rio_Tokyo_semaines)\n\nTime difference of 256.8571 weeks\n\nTokyo_Paris_semaines &lt;- difftime(dates[[1]][5], dates[[1]][4], units = \"weeks\") #Diff entre le cinquième et sixième élément de la liste dates en semaines\nprint(Tokyo_Paris_semaines)\n\nTime difference of 154.7143 weeks"
  },
  {
    "objectID": "posts/TD3 quarto/TD3.html#exercises-semaine-3",
    "href": "posts/TD3 quarto/TD3.html#exercises-semaine-3",
    "title": "Exercices Semaine 3",
    "section": "",
    "text": "Ce tutorial se concentre sur l’apprentissage d’importation des fichiers avec des formats permettant de gérer de grandes bases de données. De même, les librairies dplyr, tidyr, string et lubridate seront exploitées pour analyser les informations relatives aux Jeux Olympiques historiques.\n\ninstall.packages(\"RSQLite\")\n\n\nLire le fichier parquet avec la librairie arrow, dimension et nom des colonnes\n\n\ndata_parquet &lt;- arrow::read_parquet(\"C:/Users/yavav/OneDrive - Universitat de València/tokyo_athletes.parquet\")\ndata_parquet &lt;- as.data.frame(data_parquet)\n\nView(data_parquet)\n\n\ndim(data_parquet) #Trois variables et 11085 colonnes\n\n[1] 11085     3\n\nstr(data_parquet) #Colonnes présentes: Name, NOC, Discipline\n\n'data.frame':   11085 obs. of  3 variables:\n $ Name      : chr  \"AALERUD Katrine\" \"ABAD Nestor\" \"ABAGNALE Giovanni\" \"ABALDE Alberto\" ...\n $ NOC       : chr  \"Norway\" \"Spain\" \"Italy\" \"Spain\" ...\n $ Discipline: chr  \"Cycling Road\" \"Artistic Gymnastics\" \"Rowing\" \"Basketball\" ...\n\n\n\nLire le fichier json avec la libraire jsonlite, dimension et nom des colonnes\n\n\nchemin_acces &lt;- \"C:/Users/yavav/OneDrive - Universitat de València/olympics_athletes.json\"\n\nlibrary(jsonlite)\ndatos_json &lt;- fromJSON(chemin_acces)\ndatos_json &lt;- as.data.frame(datos_json)\n\n\ndim(datos_json) #269731 lignes et 13 colonnes\n\n[1] 269731     13\n\nstr(datos_json) #On observe le nom des différentes colonnes\n\n'data.frame':   269731 obs. of  13 variables:\n $ ID    : int  1 2 3 4 5 5 5 5 5 5 ...\n $ Name  : chr  \"A Dijiang\" \"A Lamusi\" \"Gunnar Nielsen Aaby\" \"Edgar Lindenau Aabye\" ...\n $ Sex   : chr  \"M\" \"M\" \"M\" \"M\" ...\n $ Age   : int  24 23 24 34 21 21 25 25 27 27 ...\n $ Height: int  180 170 NA NA 185 185 185 185 185 185 ...\n $ Weight: num  80 60 NA NA 82 82 82 82 82 82 ...\n $ Team  : chr  \"China\" \"China\" \"Denmark\" \"Denmark/Sweden\" ...\n $ NOC   : chr  \"CHN\" \"CHN\" \"DEN\" \"DEN\" ...\n $ Games : chr  \"1992 Summer\" \"2012 Summer\" \"1920 Summer\" \"1900 Summer\" ...\n $ City  : chr  \"Barcelona\" \"London\" \"Antwerpen\" \"Paris\" ...\n $ Sport : chr  \"Basketball\" \"Judo\" \"Football\" \"Tug-Of-War\" ...\n $ Event : chr  \"Basketball Men's Basketball\" \"Judo Men's Extra-Lightweight\" \"Football Men's Football\" \"Tug-Of-War Men's Tug-Of-War\" ...\n $ Medal : chr  NA NA NA \"Gold\" ...\n\n\n\nConnexion à la base de données SQL site avec dbConnect\n\n\nlibrary(RSQLite)\n\ncon &lt;- dbConnect(SQLite(), dbname =\"C:/Users/yavav/Documents/R avancé et Git/data.sqlite\")\n\n\nCréer deux nouvelles tables avec dbListTables\n\n\ntables &lt;- dbListTables(con)\nprint(tables) ##Tables: Tokyo_medals et Tokyo_teams\n\n[1] \"C:/Users/yavav/OneDrive - Universitat de València/__MACOSX/olympics_athletes.json\"\n[2] \"olympics_athletes\"                                                                \n[3] \"tokyo_athletes\"                                                                   \n[4] \"tokyo_medals\"                                                                     \n[5] \"tokyo_teams\"                                                                      \n\n\n\nlibrary(RSQLite)\nlibrary(DBI)\ndbWriteTable(con, \"tokyo_athletes\", data_parquet, overwrite=TRUE)\ndbWriteTable(con, \"olympics_athletes\", datos_json, overwrite=TRUE)\n\n\nInspecter la table olympics_athletes en utilisant la fonction dbListFields\n\n\ncolonnes_olympics_athletes &lt;- dbListFields(con, \"olympics_athletes\")\n\n# Afficher la liste des colonnes\nprint(colonnes_olympics_athletes)\n\n [1] \"ID\"     \"Name\"   \"Sex\"    \"Age\"    \"Height\" \"Weight\" \"Team\"   \"NOC\"   \n [9] \"Games\"  \"City\"   \"Sport\"  \"Event\"  \"Medal\" \n\ncolonnes_tokyo_athletes &lt;- dbListFields(con, \"tokyo_athletes\")\n\n# Afficher la liste des colonnes\nprint(colonnes_tokyo_athletes)\n\n[1] \"Name\"       \"NOC\"        \"Discipline\"\n\n\n\nImporter cette table depuis la base de données en utilisant la fonction dbReadTable. Convertir la table en tibble.\n\n\n##Olympics\n\nlibrary(tibble)\n\n#Lire la table depuis la base de données\ntable_olympics_athletes &lt;- dbReadTable(con, \"olympics_athletes\")\n\n# Convertir la table en tibble\ntibble_olympics_athletes &lt;- as_tibble(table_olympics_athletes)\n\n##Athletes\n\n#Lire la table depuis la base de données\ntable_tokyo_athletes &lt;- dbReadTable(con, \"tokyo_athletes\")\n\n# Convertir la table en tibble\ntibble_tokyo_athletes &lt;- as_tibble(table_tokyo_athletes)\n\nLibraires dplyr, tidyr\n\nConvertir la colonne Sex en variable catégorielle avec la fonction mutate\n\n\n#Importation des libraires \nlibrary(dplyr)\nlibrary(tidyr)\n\n\ntibble_olympics_athletes &lt;- tibble_olympics_athletes %&gt;% mutate(Sex = as.factor(Sex))\n\n\nCréer deux colonnes à partir de la colonne Games\n\n\nhelp(\"separate_wider_delim\")\n\nseparate_wider_delim(tibble_olympics_athletes, cols = Games, delim= \" \", names=c(\"Year\", \"isSummer\"), cols_remove = FALSE)\n\n# A tibble: 269,731 × 15\n      ID Name   Sex     Age Height Weight Team  NOC   Year  isSummer Games City \n   &lt;int&gt; &lt;chr&gt;  &lt;fct&gt; &lt;int&gt;  &lt;int&gt;  &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;    &lt;chr&gt; &lt;chr&gt;\n 1     1 A Dij… M        24    180     80 China CHN   1992  Summer   1992… Barc…\n 2     2 A Lam… M        23    170     60 China CHN   2012  Summer   2012… Lond…\n 3     3 Gunna… M        24     NA     NA Denm… DEN   1920  Summer   1920… Antw…\n 4     4 Edgar… M        34     NA     NA Denm… DEN   1900  Summer   1900… Paris\n 5     5 Chris… F        21    185     82 Neth… NED   1988  Winter   1988… Calg…\n 6     5 Chris… F        21    185     82 Neth… NED   1988  Winter   1988… Calg…\n 7     5 Chris… F        25    185     82 Neth… NED   1992  Winter   1992… Albe…\n 8     5 Chris… F        25    185     82 Neth… NED   1992  Winter   1992… Albe…\n 9     5 Chris… F        27    185     82 Neth… NED   1994  Winter   1994… Lill…\n10     5 Chris… F        27    185     82 Neth… NED   1994  Winter   1994… Lill…\n# ℹ 269,721 more rows\n# ℹ 3 more variables: Sport &lt;chr&gt;, Event &lt;chr&gt;, Medal &lt;chr&gt;\n\n\n\nCréer deux colonnes à partir de la colonne Games. La première colonne Year sera une colonne de type integer contenant l’année des jeux. La deuxième colonne isSummer sera une colonne booléenne qui indiquera si les jeux sont des jeux d’été ou d’hiver\n\n\nany(is.na(tibble_olympics_athletes$Age)) #Ce code permet de vérifier la présence des NA's au sein de la colonne Age\n\n[1] TRUE\n\ntibble_olympics_athletes %&gt;% group_by(Games) %&gt;%\n  summarise(mean_age=mean(Age,na.rm=TRUE)) #Ce code calcule la moyenne d'age pour chacune des éditions des JO, en excluant les valeurs manquantes du calcul. \n\n# A tibble: 51 × 2\n   Games       mean_age\n   &lt;chr&gt;          &lt;dbl&gt;\n 1 1896 Summer     23.6\n 2 1900 Summer     28.9\n 3 1904 Summer     26.7\n 4 1906 Summer     27.1\n 5 1908 Summer     27.0\n 6 1912 Summer     27.5\n 7 1920 Summer     29.3\n 8 1924 Summer     28.1\n 9 1924 Winter     27.6\n10 1928 Summer     28.0\n# ℹ 41 more rows\n\n\n\nMoyenne d’age des athletes pour chacune des éditions des JO d’été. Edition qui a compté avec les athlètes les plus jeunes ? Les plus vieux ?\n\n\ntibble_olympics_athletes %&gt;% group_by(Games) %&gt;%\n  summarise(mean_age=mean(Age,na.rm=TRUE)) %&gt;% \n  arrange(mean_age) %&gt;% slice(1) #Cela permet d'ordonner de manière croissante les moyennes d'âge ainsi que de sélectionner la première ligne (les plus jeunes)\n\n# A tibble: 1 × 2\n  Games       mean_age\n  &lt;chr&gt;          &lt;dbl&gt;\n1 1984 Winter     23.4\n\ntibble_olympics_athletes %&gt;% group_by(Games) %&gt;%\n  summarise(mean_age=mean(Age,na.rm=TRUE)) %&gt;% \n  arrange(desc(mean_age)) %&gt;% slice(1) #Cela ordonne de manière décroissante pour trouver les plus âgés \n\n# A tibble: 1 × 2\n  Games       mean_age\n  &lt;chr&gt;          &lt;dbl&gt;\n1 1932 Summer     30.2\n\n\nOn observe que l’édition qui a compté avec les athlètes les plus jeunes ont été les jeux d’hiver 1984, tandis que celle avec les plus vieux, les jeux d’été en 1932.\n\nDiscipline des JO d’été dont la taille des athlètes féminines est la plus grande ? Quelle a été cette discipline au cours de chacune des éditions ? Nombre de fois où chaque discipline a été la discipline avec les plus grandes athlètes\n\n\ntibble_olympics_athletes %&gt;% filter(Sex==\"F\") %&gt;% arrange(desc(Height)) %&gt;% slice(1) %&gt;% select(Height, Sport) #On filtre les femmes, on ordonne et sélectionne la ligne ainsi que les variables d'intérêt. \n\n# A tibble: 1 × 2\n  Height Sport     \n   &lt;int&gt; &lt;chr&gt;     \n1    213 Basketball\n\n\nLa discipline dont la taille des athlètes féminines est la plus grande est le basketball.\n\ntibble_olympics_athletes %&gt;% filter(Sex==\"F\" & !is.na(Height)) %&gt;% group_by(Games) %&gt;% \n  arrange(desc(Height)) %&gt;% slice(1) %&gt;% select(Games, Height, Sport) #On filtre pour les femmes et pour la taille sans valeurs manquantes, puis on calcule la taille plus grande pour chaque game et on sélectionne la colonne du sport correspondant. \n\n# A tibble: 45 × 3\n# Groups:   Games [45]\n   Games       Height Sport         \n   &lt;chr&gt;        &lt;int&gt; &lt;chr&gt;         \n 1 1920 Summer    175 Diving        \n 2 1924 Summer    175 Fencing       \n 3 1924 Winter    165 Figure Skating\n 4 1928 Summer    183 Fencing       \n 5 1928 Winter    165 Figure Skating\n 6 1932 Summer    183 Fencing       \n 7 1932 Winter    168 Figure Skating\n 8 1936 Summer    183 Fencing       \n 9 1936 Winter    168 Figure Skating\n10 1948 Summer    180 Athletics     \n# ℹ 35 more rows\n\n\n\ntibble_olympics_athletes %&gt;% filter(Sex==\"F\" & !is.na(Height)) %&gt;% group_by(Games) %&gt;% \n  arrange(desc(Height)) %&gt;% slice(1) %&gt;% select(Games, Height, Sport) %&gt;% pull(Sport) %&gt;% table() #On extrait la colonne sport et fait un tablau de fréquence. \n\n.\n       Alpine Skiing            Athletics           Basketball \n                   3                    5                    9 \n           Bobsleigh Cross Country Skiing               Diving \n                   3                    4                    1 \n             Fencing       Figure Skating           Ice Hockey \n                   4                    4                    1 \n                Luge        Speed Skating             Swimming \n                   3                    4                    1 \n          Volleyball \n                   3 \n\n\nstringr, lubridate\nOn dispose du texte suivant :\n\ntexte &lt;- \"Les jeux olympiques d’été se déroulent normalement tous les 4 ans, durant les mois de Juillet et Août. Les jeux de Rio ont eu lieu du 5 Août 2016 au 20 Août 2016, ceux de Tokyo du 23 Juillet 2021 au 8 Août 2021, et ceux de Paris auront lieu du 26 Juillet 2024 au 11 Août 2024. Plus de 10000 athlètes sont attendus du monde\nentier à Paris.\"\n\n\nExtraire les dates des différentes éditions des JO\n\n\n#Chargement de librairie \nlibrary(stringr)\n\n\nstr_extract_all(texte, \"\\\\b(\\\\d{1,2} \\\\w+ \\\\d{4})\\\\b\")\n\n[[1]]\n[1] \"5 Août 2016\"     \"20 Août 2016\"    \"23 Juillet 2021\" \"8 Août 2021\"    \n[5] \"26 Juillet 2024\" \"11 Août 2024\"   \n\n\n\nRemplacer les noms des mois par leur numéro pour rendre ces éléments convertibles en date en utilisant la fonction str_replace\n\n\nstr_replace_all(texte, c(\"Juillet\"=\"7\", \"Août\"=\"8\"))\n\n[1] \"Les jeux olympiques d’été se déroulent normalement tous les 4 ans, durant les mois de 7 et 8. Les jeux de Rio ont eu lieu du 5 8 2016 au 20 8 2016, ceux de Tokyo du 23 7 2021 au 8 8 2021, et ceux de Paris auront lieu du 26 7 2024 au 11 8 2024. Plus de 10000 athlètes sont attendus du monde\\nentier à Paris.\"\n\n\n\nlibrary(lubridate)\n\n\npatron_dates &lt;- \"\\\\b(\\\\d{1,2} \\\\w+ \\\\d{4})\\\\b\"\n\n# Extraire et convertir toutes les dates\ndates &lt;- str_extract_all(texte, patron_dates) %&gt;%\n  lapply(function(matches) {\n    dmy(matches)\n  })\n\n#Imprimer le résultat\nprint(dates)\n\n[[1]]\n[1] \"2016-08-05\" \"2016-08-20\" \"2021-07-23\" \"2021-08-08\" \"2024-07-26\"\n[6] \"2024-08-11\"\n\n\n\nCombien de jours ont séparés les éditions de Rio et Tokyo ? Et sépareront les éditions de Tokyo et de Paris ? Faites le même calcul en semaines.\n\n\nRio_Tokyo &lt;- difftime(dates[[1]][3], dates[[1]][2], units = \"days\") #Diff entre le troisième et deuxième élément de la liste dates en jour\nprint(Rio_Tokyo)\n\nTime difference of 1798 days\n\nTokyo_Paris &lt;- difftime(dates[[1]][5], dates[[1]][4], units = \"days\") #Diff entre le cinquième et sixième élément de la liste dates en jour\nprint(Tokyo_Paris)\n\nTime difference of 1083 days\n\nRio_Tokyo_semaines &lt;- difftime(dates[[1]][3], dates[[1]][2], units = \"weeks\") #Diff entre le troisième et deuxième élément de la liste dates en semaines\nprint(Rio_Tokyo_semaines)\n\nTime difference of 256.8571 weeks\n\nTokyo_Paris_semaines &lt;- difftime(dates[[1]][5], dates[[1]][4], units = \"weeks\") #Diff entre le cinquième et sixième élément de la liste dates en semaines\nprint(Tokyo_Paris_semaines)\n\nTime difference of 154.7143 weeks"
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Package Olympics Weather",
    "section": "",
    "text": "Le package olympicsWeather est une librairie de R dédiée à la récupération de prévisions météorologiques en temps réel pour les différents sites olympiques qui aurant lieu du 26 juillet au 11 août 2024 pour célébrer les Jeux Olympiques 2024 à Paris. Il offre des fonctionnalités permettant d’obtenir des données détaillées sur les conditions météorologiques horaires des 7 prochains jours.\n\n\nPour installer le package olympicsWeather depuis GitHub, vous pouvez utiliser le package remotes. Il est nécessaire d’avoir installé le package remotes au préalable. Il peut être installé avec la commande suivante :\n\ninstall.packages(\"remotes\")\n\nEnsuite, on peut utiliser la commande suivante pour installer olympicsWeather :\n\nremotes::install_github(\"YavaVilar/olympicsWeather\")\n\nLa librarie peut être importée de la façon suivante, ce qui permet d’utiliser ses fonctions pour avoir accès aux données météorologiques.\n\nlibrary(olympicsWeather)\n\nLa fonction get_forecast est la fonction principale de la librairie. Elle retourne un dataframe avec 5 colonnes relatives à la date et heure, la température, la température ressentie, la probabilité de précipitation et la précipitation effecitve. Ci-dessous, on trouve trois exemples d’implémentation pour le stade de France, le Tahiti et les coordonées géographiques 43.276703, 5.334791. Des graphiques ont été effectués pour visualiser les données sur la période 04/03/2024-10 - 10/03/2024."
  },
  {
    "objectID": "posts/post-with-code/index.html#librarie-olympicsweather",
    "href": "posts/post-with-code/index.html#librarie-olympicsweather",
    "title": "Package Olympics Weather",
    "section": "",
    "text": "Le package olympicsWeather est une librairie de R dédiée à la récupération de prévisions météorologiques en temps réel pour les différents sites olympiques qui aurant lieu du 26 juillet au 11 août 2024 pour célébrer les Jeux Olympiques 2024 à Paris. Il offre des fonctionnalités permettant d’obtenir des données détaillées sur les conditions météorologiques horaires des 7 prochains jours.\n\n\nPour installer le package olympicsWeather depuis GitHub, vous pouvez utiliser le package remotes. Il est nécessaire d’avoir installé le package remotes au préalable. Il peut être installé avec la commande suivante :\n\ninstall.packages(\"remotes\")\n\nEnsuite, on peut utiliser la commande suivante pour installer olympicsWeather :\n\nremotes::install_github(\"YavaVilar/olympicsWeather\")\n\nLa librarie peut être importée de la façon suivante, ce qui permet d’utiliser ses fonctions pour avoir accès aux données météorologiques.\n\nlibrary(olympicsWeather)\n\nLa fonction get_forecast est la fonction principale de la librairie. Elle retourne un dataframe avec 5 colonnes relatives à la date et heure, la température, la température ressentie, la probabilité de précipitation et la précipitation effecitve. Ci-dessous, on trouve trois exemples d’implémentation pour le stade de France, le Tahiti et les coordonées géographiques 43.276703, 5.334791. Des graphiques ont été effectués pour visualiser les données sur la période 04/03/2024-10 - 10/03/2024."
  },
  {
    "objectID": "posts/post-with-code/index.html#prévision-de-la-météo-pour-le-stade-de-france",
    "href": "posts/post-with-code/index.html#prévision-de-la-météo-pour-le-stade-de-france",
    "title": "Package Olympics Weather",
    "section": "Prévision de la météo pour le stade de France",
    "text": "Prévision de la météo pour le stade de France\n\nmeteo_stade_france &lt;- get_forecast(\"stade de France\")\nmeteo_stade_france\n\n# A tibble: 168 × 5\n   data_heure     temperature_celsius temperature_ressenti…¹ precipitation_proba\n   &lt;chr&gt;                        &lt;dbl&gt;                  &lt;dbl&gt;               &lt;int&gt;\n 1 2024-03-05T00…                 7                      4.2                  13\n 2 2024-03-05T01…                 6.9                    4                     9\n 3 2024-03-05T02…                 6.8                    3.8                   4\n 4 2024-03-05T03…                 6.9                    4.2                   0\n 5 2024-03-05T04…                 6.7                    4.2                   1\n 6 2024-03-05T05…                 6.9                    4.8                   2\n 7 2024-03-05T06…                 7.2                    4.7                   3\n 8 2024-03-05T07…                 7.1                    4.4                   3\n 9 2024-03-05T08…                 7.2                    4.4                   3\n10 2024-03-05T09…                 7.8                    4.5                   3\n# ℹ 158 more rows\n# ℹ abbreviated name: ¹​temperature_ressentie_celsius\n# ℹ 1 more variable: precipitation &lt;dbl&gt;"
  },
  {
    "objectID": "posts/post-with-code/index.html#prévision-de-la-météo-pour-tahiti",
    "href": "posts/post-with-code/index.html#prévision-de-la-météo-pour-tahiti",
    "title": "Package Olympics Weather",
    "section": "Prévision de la météo pour Tahiti",
    "text": "Prévision de la météo pour Tahiti\nLe Tahiti organisera les compétitions de surf aux JO 2024.\n\n\n\n\n\n\nmeteo_Tahiti &lt;- get_forecast(\"Tahiti\")\nmeteo_Tahiti\n\n# A tibble: 168 × 5\n   data_heure     temperature_celsius temperature_ressenti…¹ precipitation_proba\n   &lt;chr&gt;                        &lt;dbl&gt;                  &lt;dbl&gt;               &lt;int&gt;\n 1 2024-03-05T00…                17.7                   19.1                  42\n 2 2024-03-05T01…                17.6                   18.8                  48\n 3 2024-03-05T02…                17.6                   18.4                  55\n 4 2024-03-05T03…                17.7                   18.6                  61\n 5 2024-03-05T04…                17.8                   18.7                  65\n 6 2024-03-05T05…                17.8                   19                    70\n 7 2024-03-05T06…                17.7                   18.8                  74\n 8 2024-03-05T07…                17.6                   18.3                  83\n 9 2024-03-05T08…                17.6                   18.4                  91\n10 2024-03-05T09…                17.6                   18.5                 100\n# ℹ 158 more rows\n# ℹ abbreviated name: ¹​temperature_ressentie_celsius\n# ℹ 1 more variable: precipitation &lt;dbl&gt;"
  },
  {
    "objectID": "posts/post-with-code/index.html#prévision-de-la-météo-pour-les-coordonnées-43.276703-5.334791",
    "href": "posts/post-with-code/index.html#prévision-de-la-météo-pour-les-coordonnées-43.276703-5.334791",
    "title": "Package Olympics Weather",
    "section": "Prévision de la météo pour les coordonnées 43.276703, 5.334791",
    "text": "Prévision de la météo pour les coordonnées 43.276703, 5.334791\nLes coordonées 43.276703, 5.334791 correspondent à une adresse située à Marseille, au Sud de la France. Cette ville recevra les épreuves de voile ainsi que 10 matches de tournoi de football.\n\n\n\n\n\n\nmeteo_coordonnées &lt;- get_forecast(\"43.276703,5.334791\")\nmeteo_coordonnées\n\n# A tibble: 168 × 5\n   data_heure     temperature_celsius temperature_ressenti…¹ precipitation_proba\n   &lt;chr&gt;                        &lt;dbl&gt;                  &lt;dbl&gt;               &lt;int&gt;\n 1 2024-03-05T00…                 5.4                    1.6                   0\n 2 2024-03-05T01…                 5.4                    1.6                   1\n 3 2024-03-05T02…                 5.6                    1.8                   2\n 4 2024-03-05T03…                 5.5                    1.7                   3\n 5 2024-03-05T04…                 5.6                    1.7                  13\n 6 2024-03-05T05…                 5.6                    1.8                  22\n 7 2024-03-05T06…                 5.6                    1                    32\n 8 2024-03-05T07…                 5                      1.2                  37\n 9 2024-03-05T08…                 5.9                    1                    43\n10 2024-03-05T09…                 7.1                    1.9                  48\n# ℹ 158 more rows\n# ℹ abbreviated name: ¹​temperature_ressentie_celsius\n# ℹ 1 more variable: precipitation &lt;dbl&gt;"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Présentation du blog",
    "section": "",
    "text": "Ce blog s’inscrit dans le cadre d’un projet réalisé pour le cours R avancé et GitHub au sein du Master d’Econométrie Appliquée à l’Université de Nantes. Vous y trouverez deux sections: La première décrit la façon d’installer la librarie créée par l’autrice sous R nomméé olympicsWeather, dont son objectif est de prévoir la météo en temps réél de n’importe quelle coordonnée géographique ou adresse fournie par l’utilisateur. Trois exemples de localisation géographique seront montrés. La deuxième section contient trois posts d’articles relatifs aux exercises effectués lors du cours R avancé et GitHub.\nRéalisé par : vilarvaleray@gmail.com"
  },
  {
    "objectID": "posts/nouvelle section/TD1.html",
    "href": "posts/nouvelle section/TD1.html",
    "title": "Exercices Semaine 1",
    "section": "",
    "text": "Cet ensemble d’exercices en R se concentre sur l’analyse des données relatives aux infrastructures olympiques des Jeux de 2024 à Paris. Nous utiliserons exclusivement les fonctions de base de R pour explorer, analyser et extraire des informations clés sur les sites olympiques et paralympiques.\n\n\n\n\n\n\nLire le fichier avec la base de données, nom et nature des colonnes, nombre de lignes\n\n\n#Lire et nommer le fichier \ndata_ex &lt;- read.csv(\"C:/Users/yavav/Downloads/paris-2024-sites-olympiques-et-paralympiques-franciliens (1).csv\", sep=\";\", dec=\",\", quote=\"\\\"\", na.strings = NA)\n\n#Noms et nature des colonnes \nstr(data_ex)\n\n'data.frame':   31 obs. of  4 variables:\n $ geo_point                     : chr  \"48.841319, 2.253076\" \"48.924388, 2.359871\" \"48.92467, 2.332428\" \"48.815115, 2.08208\" ...\n $ nom                           : chr  \"Parc des Princes\" \"Stade de France\" \"Village olympique\" \"Château de Versailles\" ...\n $ sites_olympiques_paralympiques: chr  \"Site olympique\" \"Site olympique,Site paralympique\" \"\" \"Site olympique,Site paralympique\" ...\n $ sports                        : chr  \"Football\" \"Athlétisme,Para athlétisme,Rugby\" \"\" \"Sports équestres,Para équitation,Pentathlon moderne\" ...\n\n#Nombre de lignes \nnrow(data_ex) \n\n[1] 31\n\n\nLe dataframe contient 4 colonnes: geo_point, village olympique, sites_olympiques_paralympiques et sports, codées en chr (caractère), ainsi que31 colonnes.\n\nCombien il y a-t-il de sites olympiques\n\n\nx &lt;- 0\n\nfor (value in data_ex$sites_olympiques_paralympiques) {\n  if (value == \"Site olympique\" | value == \"Site olympique,Site paralympique\") {\n    x &lt;- x + 1\n  } } \n\nprint(paste(\"Número total de Sites olympiques:\", x))\n\n[1] \"Número total de Sites olympiques: 26\"\n\n\n\nCombien il y a-t-il de sites paralympiques\n\n\ny &lt;- 0\n\nfor (value in data_ex$sites_olympiques_paralympiques) {\n  if (value == \"Site paralympique\" | value == \"Site olympique,Site paralympique\") {\n    y &lt;- y + 1\n  } } \n\nprint(paste(\"Número total de Sites paralympiques:\", y))\n\n[1] \"Número total de Sites paralympiques: 19\"\n\n\n\nQuels sont les sites qui aceuillent plusieurs disciplines sportives\n\n\n#On cherche  les cellules de la colonne sports qui continnent des éléments séparés par un virgule, indice d'acceuil de plus d'un sport\n\nsites_plusieurs_sports &lt;- data_ex[grepl(\",\", data_ex$sports), c(\"nom\")]\nsites_plusieurs_sports\n\n [1] \"Stade de France\"                                \n [2] \"Château de Versailles\"                          \n [3] \"Grand Palais\"                                   \n [4] \"Invalides\"                                      \n [5] \"Pont d'Iéna\"                                    \n [6] \"Arena Bercy\"                                    \n [7] \"Arena Paris nord\"                               \n [8] \"Arena Paris Sud 6 (Porte de Versailles)\"        \n [9] \"Stade de la Concorde\"                           \n[10] \"Arena Champs de Mars\"                           \n[11] \"Stade Tour Eiffel\"                              \n[12] \"Arena La Chapelle\"                              \n[13] \"Centre aquatique\"                               \n[14] \"Arena Paris Sud 1 (Porte de Versailles)\"        \n[15] \"Arena Paris Sud 4 (Porte de Versailles)\"        \n[16] \"La Défense Arena\"                               \n[17] \"Stade nautique\"                                 \n[18] \"Vélodrome National de Saint-Quentin-en-Yvelines\"\n[19] \"Stade Roland Garros\"                            \n\n\n\nQuelles sont les disciplines para-olympiques acceuillies dans ces sites franciliens\n\n\ndisciplines_plusieurs_sports &lt;- data_ex[grepl(\",\", data_ex$sports), c(\"nom\", \"sports\")] \ndisciplines_plusieurs_sports\n\n                                               nom\n2                                  Stade de France\n4                            Château de Versailles\n8                                     Grand Palais\n9                                        Invalides\n11                                     Pont d'Iéna\n12                                     Arena Bercy\n13                                Arena Paris nord\n14         Arena Paris Sud 6 (Porte de Versailles)\n15                            Stade de la Concorde\n17                            Arena Champs de Mars\n18                               Stade Tour Eiffel\n20                               Arena La Chapelle\n22                                Centre aquatique\n23         Arena Paris Sud 1 (Porte de Versailles)\n24         Arena Paris Sud 4 (Porte de Versailles)\n26                                La Défense Arena\n27                                  Stade nautique\n29 Vélodrome National de Saint-Quentin-en-Yvelines\n30                             Stade Roland Garros\n                                                             sports\n2                                  Athlétisme,Para athlétisme,Rugby\n4               Sports équestres,Para équitation,Pentathlon moderne\n8                 Escrime,Escrime fauteuil,Taekwondo,Para taekwondo\n9        Tir à l'arc,Para tir à l'arc,Athlétisme,Cyclisme sur route\n11                                    Cyclisme sur route,Athlétisme\n12     Basketball,Basket fauteuil,Gymnastique artistique,trampoline\n13                Boxe,Escrime,Pentathlon moderne,Volley-ball assis\n14                                  Haltérophilie,Handball,Goalball\n15                 Basketball 3x3,BMX freestyle,Breaking,Skateboard\n17                              Judo,Para judo,Lutte,Rugby fauteuil\n18                                     Volleyball de plage,Cécifoot\n20 Badminton,Para Badminton,Gymnastique rythmique,Para powerlifting\n22                          Natation artistique,Plongeon,Water-polo\n23                                                Volleyball,Boccia\n24                             Tennis de table,Para tennis de table\n26                                Natation,Para natation,Water-polo\n27                              Canoë,Para canoë,Aviron,Para aviron\n29                       Cyclisme sur piste,Para cyclisme sur piste\n30                                      Tennis,Tennis fauteuil,Boxe\n\n\nLe dataframe résultant permet de visualiser le nom du site avec les différentes disciplines associées.\n\nSites qui aceuillent le plus de disciples différentes\n\n\nmax_sports &lt;- max(sapply(strsplit(data_ex$sports, \",\"),length))\n\nfiles_max_sports &lt;- which(sapply(strsplit(data_ex$sports, \",\"),length)==max_sports)\n\ndata_max_sports &lt;- data_ex[files_max_sports, c(\"nom\", \"sports\")]\n\ndata_max_sports\n\n                    nom\n8          Grand Palais\n9             Invalides\n12          Arena Bercy\n13     Arena Paris nord\n15 Stade de la Concorde\n17 Arena Champs de Mars\n20    Arena La Chapelle\n27       Stade nautique\n                                                             sports\n8                 Escrime,Escrime fauteuil,Taekwondo,Para taekwondo\n9        Tir à l'arc,Para tir à l'arc,Athlétisme,Cyclisme sur route\n12     Basketball,Basket fauteuil,Gymnastique artistique,trampoline\n13                Boxe,Escrime,Pentathlon moderne,Volley-ball assis\n15                 Basketball 3x3,BMX freestyle,Breaking,Skateboard\n17                              Judo,Para judo,Lutte,Rugby fauteuil\n20 Badminton,Para Badminton,Gymnastique rythmique,Para powerlifting\n27                              Canoë,Para canoë,Aviron,Para aviron\n\n\nOn observe qu’il y a un total de 8 sites qui acceuillent un total de 4 sports chacun.\n\nQuel discipline aura lieu sur le plus grand nombre de sites ? Quels sont ces sites ?\n\n\n# Conter la fréquence de chaque discipline\nfrequence_disciplines &lt;- table(unlist(strsplit(data_ex$sports, \",\")))\n\n# Discipline avec plus grande fréquence\ndiscipline_plus_frequente &lt;- names(frequence_disciplines)[which.max(frequence_disciplines)]\n\n# Résultat\ncat(\"La discipline qui aura lieu sur le plus grand nombre de sites est:\", discipline_plus_frequente, \"\\n\")\n\nLa discipline qui aura lieu sur le plus grand nombre de sites est: Athlétisme \n\n\n\n# Filtrer les sites qui incluent le mot \"Athlétisme\" dans la colonne Discipline\nsites_atletisme &lt;- data_ex[grepl(\"Athlétisme\", data_ex$sports, ignore.case = TRUE), c(\"nom\", \"sports\")]\n\n# Imprimer les résultats\ncat(\"Les sites où l'athlétisme aura lieu sont les suivants:\\n\")\n\nLes sites où l'athlétisme aura lieu sont les suivants:\n\nprint(sites_atletisme)\n\n                                   nom\n2                      Stade de France\n6  Terrain des Essences - La Courneuve\n9                            Invalides\n11                         Pont d'Iéna\n25             Hôtel de ville de Paris\n                                                       sports\n2                            Athlétisme,Para athlétisme,Rugby\n6                                             Para athlétisme\n9  Tir à l'arc,Para tir à l'arc,Athlétisme,Cyclisme sur route\n11                              Cyclisme sur route,Athlétisme\n25                                                 Athlétisme\n\n\nOn voit que l’athlétisme aura lieu sur 5 sites à Paris.\n\nQuels sont les deux sites les plus proches ?\n\n\n#Libraires \n\nlibrary(geosphere)\nlibrary(tidyr)\n\n#Séparer les coordonnées géographiques en deux colonnes par la virgule \n\ndata_ex &lt;- separate(data_ex, geo_point, into = c(\"lat\", \"long\"), sep = \", \")\n\n# Fonction pour calculer la distance euclidienne\n\ndata_ex$lat &lt;- as.numeric(data_ex$lat)\ndata_ex$long &lt;- as.numeric(data_ex$long)\n\ndistances &lt;- distHaversine(data_ex[, c(\"long\", \"lat\")])\nprint(distances)\n\n [1] 12109.0289  2007.5022 22017.3512 28908.6007  1204.2823 36658.5531\n [7] 26702.8086   422.2544 11450.5703 13052.7520  6674.7313 18001.9809\n[13] 22981.5082  4582.2876  8949.4822  9269.0396   436.5820 20677.9533\n[19] 27022.4177 10476.8609 12176.4034 11437.7799   419.6006  5441.5332\n[25]  9902.1865 30003.3283 42913.1029  5092.1872 16782.0752 23146.9519\n\n# Matrice pour garder les distances\ndistances &lt;- matrix(NA, nrow = nrow(data_ex), ncol = nrow(data_ex))\n\n# Calculer les distances entre toutes les coordonnées avec un boucle \nfor (i in 1:(nrow(data_ex) - 1)) {\n  for (j in (i + 1):nrow(data_ex)) {\n    distances[i, j] &lt;- distHaversine(\n      c(data_ex$lat[i], data_ex$long[i]),\n      c(data_ex$lat[j], data_ex$long[j])\n    )\n    distances[j, i] &lt;- distances[i, j]  # Symétrie\n  }\n}\n\n# Convertir la matirce en dataframe\ndistances_df &lt;- as.data.frame(distances)\n\n#Le sites les plus proches\nmin_distance &lt;- min(distances_df, na.rm=TRUE)\nmin_distance \n\n[1] 91.69166\n\n#Min distances\nmin_distannce &lt;- which(distances_df==min_distance, arr.ind=TRUE)\nmin_distannce\n\n     row col\n[1,]  29  19\n[2,]  19  29\n\n\nOn observe que la distance minimale est de 91.69, identifiée par min_distance. Min_distannce permet d’identifier la ligne et la colonne de la valeur 91.69 au sein de la matrice. Cela correspond aux noms des sites des colonnes 19 et 29 du dataframe data_ex. Stade BMX de Saint-Quentin-en-Yvelines et Vélodrome National de Saint-Quentin-en-Yvelines sont les sites les plus proches.\n\nQuels sont les sites les plus éloignés\n\n\nmax_distance &lt;- max(distances_df, na.rm=TRUE)\nprint(max_distance)\n\n[1] 74882.55\n\nmax_distannce &lt;- which(distances_df==max_distance, arr.ind=TRUE)\nmax_distannce\n\n     row col\n[1,]  27   7\n[2,]   7  27\n\n\nOn observe que Colline d’Elancourt (7) et Stade Nautique (27) sont les sites les plus éloignés avec une distance de 74882.55.\n\nAppartement situé au barycentre de l’ensemble des sites olympiques\n\n\n# Calculer les coordonnées moyennes (barycentriques)\nbarycentre &lt;- c(mean(data_ex$lat), mean(data_ex$long))\n\n# Trouver le site le plus proche du barycentre\nsite_proche_barycentre &lt;- data_ex[which.min(geosphere::distVincentySphere(barycentre, cbind(data_ex$lat, data_ex$long))), ]\n\nsite_proche_barycentre\n\n        lat     long               nom   sites_olympiques_paralympiques\n18 48.85723 2.296084 Stade Tour Eiffel Site olympique,Site paralympique\n                         sports\n18 Volleyball de plage,Cécifoot\n\n\nLe Stade Tour Eiffel se situe au barycentre de l’ensemble des sites olympiques."
  },
  {
    "objectID": "posts/nouvelle section/TD1.html#exercises-semaine-1",
    "href": "posts/nouvelle section/TD1.html#exercises-semaine-1",
    "title": "Exercices Semaine 1",
    "section": "",
    "text": "Cet ensemble d’exercices en R se concentre sur l’analyse des données relatives aux infrastructures olympiques des Jeux de 2024 à Paris. Nous utiliserons exclusivement les fonctions de base de R pour explorer, analyser et extraire des informations clés sur les sites olympiques et paralympiques.\n\n\n\n\n\n\nLire le fichier avec la base de données, nom et nature des colonnes, nombre de lignes\n\n\n#Lire et nommer le fichier \ndata_ex &lt;- read.csv(\"C:/Users/yavav/Downloads/paris-2024-sites-olympiques-et-paralympiques-franciliens (1).csv\", sep=\";\", dec=\",\", quote=\"\\\"\", na.strings = NA)\n\n#Noms et nature des colonnes \nstr(data_ex)\n\n'data.frame':   31 obs. of  4 variables:\n $ geo_point                     : chr  \"48.841319, 2.253076\" \"48.924388, 2.359871\" \"48.92467, 2.332428\" \"48.815115, 2.08208\" ...\n $ nom                           : chr  \"Parc des Princes\" \"Stade de France\" \"Village olympique\" \"Château de Versailles\" ...\n $ sites_olympiques_paralympiques: chr  \"Site olympique\" \"Site olympique,Site paralympique\" \"\" \"Site olympique,Site paralympique\" ...\n $ sports                        : chr  \"Football\" \"Athlétisme,Para athlétisme,Rugby\" \"\" \"Sports équestres,Para équitation,Pentathlon moderne\" ...\n\n#Nombre de lignes \nnrow(data_ex) \n\n[1] 31\n\n\nLe dataframe contient 4 colonnes: geo_point, village olympique, sites_olympiques_paralympiques et sports, codées en chr (caractère), ainsi que31 colonnes.\n\nCombien il y a-t-il de sites olympiques\n\n\nx &lt;- 0\n\nfor (value in data_ex$sites_olympiques_paralympiques) {\n  if (value == \"Site olympique\" | value == \"Site olympique,Site paralympique\") {\n    x &lt;- x + 1\n  } } \n\nprint(paste(\"Número total de Sites olympiques:\", x))\n\n[1] \"Número total de Sites olympiques: 26\"\n\n\n\nCombien il y a-t-il de sites paralympiques\n\n\ny &lt;- 0\n\nfor (value in data_ex$sites_olympiques_paralympiques) {\n  if (value == \"Site paralympique\" | value == \"Site olympique,Site paralympique\") {\n    y &lt;- y + 1\n  } } \n\nprint(paste(\"Número total de Sites paralympiques:\", y))\n\n[1] \"Número total de Sites paralympiques: 19\"\n\n\n\nQuels sont les sites qui aceuillent plusieurs disciplines sportives\n\n\n#On cherche  les cellules de la colonne sports qui continnent des éléments séparés par un virgule, indice d'acceuil de plus d'un sport\n\nsites_plusieurs_sports &lt;- data_ex[grepl(\",\", data_ex$sports), c(\"nom\")]\nsites_plusieurs_sports\n\n [1] \"Stade de France\"                                \n [2] \"Château de Versailles\"                          \n [3] \"Grand Palais\"                                   \n [4] \"Invalides\"                                      \n [5] \"Pont d'Iéna\"                                    \n [6] \"Arena Bercy\"                                    \n [7] \"Arena Paris nord\"                               \n [8] \"Arena Paris Sud 6 (Porte de Versailles)\"        \n [9] \"Stade de la Concorde\"                           \n[10] \"Arena Champs de Mars\"                           \n[11] \"Stade Tour Eiffel\"                              \n[12] \"Arena La Chapelle\"                              \n[13] \"Centre aquatique\"                               \n[14] \"Arena Paris Sud 1 (Porte de Versailles)\"        \n[15] \"Arena Paris Sud 4 (Porte de Versailles)\"        \n[16] \"La Défense Arena\"                               \n[17] \"Stade nautique\"                                 \n[18] \"Vélodrome National de Saint-Quentin-en-Yvelines\"\n[19] \"Stade Roland Garros\"                            \n\n\n\nQuelles sont les disciplines para-olympiques acceuillies dans ces sites franciliens\n\n\ndisciplines_plusieurs_sports &lt;- data_ex[grepl(\",\", data_ex$sports), c(\"nom\", \"sports\")] \ndisciplines_plusieurs_sports\n\n                                               nom\n2                                  Stade de France\n4                            Château de Versailles\n8                                     Grand Palais\n9                                        Invalides\n11                                     Pont d'Iéna\n12                                     Arena Bercy\n13                                Arena Paris nord\n14         Arena Paris Sud 6 (Porte de Versailles)\n15                            Stade de la Concorde\n17                            Arena Champs de Mars\n18                               Stade Tour Eiffel\n20                               Arena La Chapelle\n22                                Centre aquatique\n23         Arena Paris Sud 1 (Porte de Versailles)\n24         Arena Paris Sud 4 (Porte de Versailles)\n26                                La Défense Arena\n27                                  Stade nautique\n29 Vélodrome National de Saint-Quentin-en-Yvelines\n30                             Stade Roland Garros\n                                                             sports\n2                                  Athlétisme,Para athlétisme,Rugby\n4               Sports équestres,Para équitation,Pentathlon moderne\n8                 Escrime,Escrime fauteuil,Taekwondo,Para taekwondo\n9        Tir à l'arc,Para tir à l'arc,Athlétisme,Cyclisme sur route\n11                                    Cyclisme sur route,Athlétisme\n12     Basketball,Basket fauteuil,Gymnastique artistique,trampoline\n13                Boxe,Escrime,Pentathlon moderne,Volley-ball assis\n14                                  Haltérophilie,Handball,Goalball\n15                 Basketball 3x3,BMX freestyle,Breaking,Skateboard\n17                              Judo,Para judo,Lutte,Rugby fauteuil\n18                                     Volleyball de plage,Cécifoot\n20 Badminton,Para Badminton,Gymnastique rythmique,Para powerlifting\n22                          Natation artistique,Plongeon,Water-polo\n23                                                Volleyball,Boccia\n24                             Tennis de table,Para tennis de table\n26                                Natation,Para natation,Water-polo\n27                              Canoë,Para canoë,Aviron,Para aviron\n29                       Cyclisme sur piste,Para cyclisme sur piste\n30                                      Tennis,Tennis fauteuil,Boxe\n\n\nLe dataframe résultant permet de visualiser le nom du site avec les différentes disciplines associées.\n\nSites qui aceuillent le plus de disciples différentes\n\n\nmax_sports &lt;- max(sapply(strsplit(data_ex$sports, \",\"),length))\n\nfiles_max_sports &lt;- which(sapply(strsplit(data_ex$sports, \",\"),length)==max_sports)\n\ndata_max_sports &lt;- data_ex[files_max_sports, c(\"nom\", \"sports\")]\n\ndata_max_sports\n\n                    nom\n8          Grand Palais\n9             Invalides\n12          Arena Bercy\n13     Arena Paris nord\n15 Stade de la Concorde\n17 Arena Champs de Mars\n20    Arena La Chapelle\n27       Stade nautique\n                                                             sports\n8                 Escrime,Escrime fauteuil,Taekwondo,Para taekwondo\n9        Tir à l'arc,Para tir à l'arc,Athlétisme,Cyclisme sur route\n12     Basketball,Basket fauteuil,Gymnastique artistique,trampoline\n13                Boxe,Escrime,Pentathlon moderne,Volley-ball assis\n15                 Basketball 3x3,BMX freestyle,Breaking,Skateboard\n17                              Judo,Para judo,Lutte,Rugby fauteuil\n20 Badminton,Para Badminton,Gymnastique rythmique,Para powerlifting\n27                              Canoë,Para canoë,Aviron,Para aviron\n\n\nOn observe qu’il y a un total de 8 sites qui acceuillent un total de 4 sports chacun.\n\nQuel discipline aura lieu sur le plus grand nombre de sites ? Quels sont ces sites ?\n\n\n# Conter la fréquence de chaque discipline\nfrequence_disciplines &lt;- table(unlist(strsplit(data_ex$sports, \",\")))\n\n# Discipline avec plus grande fréquence\ndiscipline_plus_frequente &lt;- names(frequence_disciplines)[which.max(frequence_disciplines)]\n\n# Résultat\ncat(\"La discipline qui aura lieu sur le plus grand nombre de sites est:\", discipline_plus_frequente, \"\\n\")\n\nLa discipline qui aura lieu sur le plus grand nombre de sites est: Athlétisme \n\n\n\n# Filtrer les sites qui incluent le mot \"Athlétisme\" dans la colonne Discipline\nsites_atletisme &lt;- data_ex[grepl(\"Athlétisme\", data_ex$sports, ignore.case = TRUE), c(\"nom\", \"sports\")]\n\n# Imprimer les résultats\ncat(\"Les sites où l'athlétisme aura lieu sont les suivants:\\n\")\n\nLes sites où l'athlétisme aura lieu sont les suivants:\n\nprint(sites_atletisme)\n\n                                   nom\n2                      Stade de France\n6  Terrain des Essences - La Courneuve\n9                            Invalides\n11                         Pont d'Iéna\n25             Hôtel de ville de Paris\n                                                       sports\n2                            Athlétisme,Para athlétisme,Rugby\n6                                             Para athlétisme\n9  Tir à l'arc,Para tir à l'arc,Athlétisme,Cyclisme sur route\n11                              Cyclisme sur route,Athlétisme\n25                                                 Athlétisme\n\n\nOn voit que l’athlétisme aura lieu sur 5 sites à Paris.\n\nQuels sont les deux sites les plus proches ?\n\n\n#Libraires \n\nlibrary(geosphere)\nlibrary(tidyr)\n\n#Séparer les coordonnées géographiques en deux colonnes par la virgule \n\ndata_ex &lt;- separate(data_ex, geo_point, into = c(\"lat\", \"long\"), sep = \", \")\n\n# Fonction pour calculer la distance euclidienne\n\ndata_ex$lat &lt;- as.numeric(data_ex$lat)\ndata_ex$long &lt;- as.numeric(data_ex$long)\n\ndistances &lt;- distHaversine(data_ex[, c(\"long\", \"lat\")])\nprint(distances)\n\n [1] 12109.0289  2007.5022 22017.3512 28908.6007  1204.2823 36658.5531\n [7] 26702.8086   422.2544 11450.5703 13052.7520  6674.7313 18001.9809\n[13] 22981.5082  4582.2876  8949.4822  9269.0396   436.5820 20677.9533\n[19] 27022.4177 10476.8609 12176.4034 11437.7799   419.6006  5441.5332\n[25]  9902.1865 30003.3283 42913.1029  5092.1872 16782.0752 23146.9519\n\n# Matrice pour garder les distances\ndistances &lt;- matrix(NA, nrow = nrow(data_ex), ncol = nrow(data_ex))\n\n# Calculer les distances entre toutes les coordonnées avec un boucle \nfor (i in 1:(nrow(data_ex) - 1)) {\n  for (j in (i + 1):nrow(data_ex)) {\n    distances[i, j] &lt;- distHaversine(\n      c(data_ex$lat[i], data_ex$long[i]),\n      c(data_ex$lat[j], data_ex$long[j])\n    )\n    distances[j, i] &lt;- distances[i, j]  # Symétrie\n  }\n}\n\n# Convertir la matirce en dataframe\ndistances_df &lt;- as.data.frame(distances)\n\n#Le sites les plus proches\nmin_distance &lt;- min(distances_df, na.rm=TRUE)\nmin_distance \n\n[1] 91.69166\n\n#Min distances\nmin_distannce &lt;- which(distances_df==min_distance, arr.ind=TRUE)\nmin_distannce\n\n     row col\n[1,]  29  19\n[2,]  19  29\n\n\nOn observe que la distance minimale est de 91.69, identifiée par min_distance. Min_distannce permet d’identifier la ligne et la colonne de la valeur 91.69 au sein de la matrice. Cela correspond aux noms des sites des colonnes 19 et 29 du dataframe data_ex. Stade BMX de Saint-Quentin-en-Yvelines et Vélodrome National de Saint-Quentin-en-Yvelines sont les sites les plus proches.\n\nQuels sont les sites les plus éloignés\n\n\nmax_distance &lt;- max(distances_df, na.rm=TRUE)\nprint(max_distance)\n\n[1] 74882.55\n\nmax_distannce &lt;- which(distances_df==max_distance, arr.ind=TRUE)\nmax_distannce\n\n     row col\n[1,]  27   7\n[2,]   7  27\n\n\nOn observe que Colline d’Elancourt (7) et Stade Nautique (27) sont les sites les plus éloignés avec une distance de 74882.55.\n\nAppartement situé au barycentre de l’ensemble des sites olympiques\n\n\n# Calculer les coordonnées moyennes (barycentriques)\nbarycentre &lt;- c(mean(data_ex$lat), mean(data_ex$long))\n\n# Trouver le site le plus proche du barycentre\nsite_proche_barycentre &lt;- data_ex[which.min(geosphere::distVincentySphere(barycentre, cbind(data_ex$lat, data_ex$long))), ]\n\nsite_proche_barycentre\n\n        lat     long               nom   sites_olympiques_paralympiques\n18 48.85723 2.296084 Stade Tour Eiffel Site olympique,Site paralympique\n                         sports\n18 Volleyball de plage,Cécifoot\n\n\nLe Stade Tour Eiffel se situe au barycentre de l’ensemble des sites olympiques."
  },
  {
    "objectID": "posts/TD2 quarto/TD 2.html",
    "href": "posts/TD2 quarto/TD 2.html",
    "title": "Exercices Semaine 2",
    "section": "",
    "text": "Ces exercises ont pour but l’implémentation des fonctions pour analyser les données historiques des jeux olympiques.\n\nLancer la commande suivante. Que contient l’objet?\n\n\nlibrary(rvest)\nlibrary(purrr)\n\nlist_tables &lt;-\n  session(\"https://fr.wikipedia.org/wiki/Liste_des_m%C3%A9daill%C3%A9s_olympiques\") |&gt;\n  html_elements(\".wikitable\") |&gt;\n  html_table()\n\nL’objet contient une liste avec 6 éléments contenant différentes bases de données.\n\nOn s’intéresse à la première table. Créer un objet intitulédata_medailles_sport_ete contenant le premier élément de list_tables. La table n’est pas bien formattée. Supprimer la première colonne, les noms de colonnes et la première ligne. Renommer les colonnes en c(“Discipline”, “Annees”, “Editions”, “Epreuves_2020”, “Or”, “Argent”, “Bronze”, “Total”, “Athletes_medailles”, “Athletes_or”). Les colonnes Editions, Epreuves_2020, Or, Argent, Bronze, Total seront converties en colonnes d’entiers.\n\n\n#Créer data_medailles_sport_ete contenant la première table de la liste \n\ndata_medailles_sport_ete &lt;- list_tables[[1]]\n\n# Supprimer la première colonne, les noms de colonnes et la première ligne\n\ndata_medailles_sport_ete &lt;- data_medailles_sport_ete[-1,-1]\ncolnames(data_medailles_sport_ete) &lt;- NULL\n\n# Renommer des colonnes \n\ncolnames(data_medailles_sport_ete) &lt;-  c(\"Discipline\", \"Annees\", \"Editions\",\n  \"Epreuves_2020\", \"Or\", \"Argent\", \"Bronze\", \"Total\", \"Athletes_medailles\",\n  \"Athletes_or\")\n\n#Coder en integer \n\ndata_medailles_sport_ete[, 3:8] &lt;- lapply(data_medailles_sport_ete[, 3:8], as.integer)\n\n\nLes 3 disciplines avec le plus de médailles distribuées\n\n\nlibrary(tidyverse)\nlibrary(dplyr)\n\n#Option avec le tidyverse\n\nTop3_disciplines &lt;- data_medailles_sport_ete |&gt; arrange(desc(Total)) |&gt; slice(1:3)\n\nTop3_disciplines\n\n# A tibble: 3 × 10\n  Discipline             Annees Editions Epreuves_2020    Or Argent Bronze Total\n  &lt;chr&gt;                  &lt;chr&gt;     &lt;int&gt;         &lt;int&gt; &lt;int&gt;  &lt;int&gt;  &lt;int&gt; &lt;int&gt;\n1 Athlétisme             Depui…       29            48  1028   1030   1027  3085\n2 Natation(hommes, femm… Depui…       29            37   607    604    603  1814\n3 Lutte                  1896,…       28            18   430    429    499  1358\n# ℹ 2 more variables: Athletes_medailles &lt;chr&gt;, Athletes_or &lt;chr&gt;\n\n#Une autre option avec la fct orderet regarder les 3 premiers\n\norder(data_medailles_sport_ete$Total, decreasing=TRUE)\n\n [1]  1 18 17 12  5 25  2  7  6 14  9 16 28  8 21 23 26 22 20  3 24 15 10  4 29\n[26] 30 13 19 27 11\n\n\nL’athléthisme, la natation et la lutte sont les trois disciplines avec le plus de médailles distribuées.\n\nLes 3 disciplines avec le moins d’épreuves en 2020\n\n\ndata_medailles_sport_ete_ordonne_epreuves2020 &lt;- data_medailles_sport_ete |&gt; arrange(Epreuves_2020) |&gt; slice(1:3)\ndata_medailles_sport_ete_ordonne_epreuves2020 ##Sélectionner les 3 dernières\n\n# A tibble: 3 × 10\n  Discipline Annees             Editions Epreuves_2020    Or Argent Bronze Total\n  &lt;chr&gt;      &lt;chr&gt;                 &lt;int&gt;         &lt;int&gt; &lt;int&gt;  &lt;int&gt;  &lt;int&gt; &lt;int&gt;\n1 Football   1900–1928,depuis …       27             2    34     34     35   103\n2 Golf       1900–1904,depuis …        4             2     8      8      9    19\n3 Handball   1936,depuis 1972         14             2    26     26     26    78\n# ℹ 2 more variables: Athletes_medailles &lt;chr&gt;, Athletes_or &lt;chr&gt;\n\n\nLe football, le golf et le handball ont été les disciplines avec le moins d’épreuves en 2020\n\nCalculer une fonction depuis qui représente depuis quelle année l’édition est au programme\n\n\ncalcul_nb_editions_int &lt;- function(depuis) {\n  return(2024-depuis)\n}\n\ncalcul_nb_editions_int(1896) ##Mettre l'année de commence au programme.\n\n[1] 128"
  },
  {
    "objectID": "posts/TD2 quarto/TD 2.html#exercices-semaine-2",
    "href": "posts/TD2 quarto/TD 2.html#exercices-semaine-2",
    "title": "Exercices Semaine 2",
    "section": "",
    "text": "Ces exercises ont pour but l’implémentation des fonctions pour analyser les données historiques des jeux olympiques.\n\nLancer la commande suivante. Que contient l’objet?\n\n\nlibrary(rvest)\nlibrary(purrr)\n\nlist_tables &lt;-\n  session(\"https://fr.wikipedia.org/wiki/Liste_des_m%C3%A9daill%C3%A9s_olympiques\") |&gt;\n  html_elements(\".wikitable\") |&gt;\n  html_table()\n\nL’objet contient une liste avec 6 éléments contenant différentes bases de données.\n\nOn s’intéresse à la première table. Créer un objet intitulédata_medailles_sport_ete contenant le premier élément de list_tables. La table n’est pas bien formattée. Supprimer la première colonne, les noms de colonnes et la première ligne. Renommer les colonnes en c(“Discipline”, “Annees”, “Editions”, “Epreuves_2020”, “Or”, “Argent”, “Bronze”, “Total”, “Athletes_medailles”, “Athletes_or”). Les colonnes Editions, Epreuves_2020, Or, Argent, Bronze, Total seront converties en colonnes d’entiers.\n\n\n#Créer data_medailles_sport_ete contenant la première table de la liste \n\ndata_medailles_sport_ete &lt;- list_tables[[1]]\n\n# Supprimer la première colonne, les noms de colonnes et la première ligne\n\ndata_medailles_sport_ete &lt;- data_medailles_sport_ete[-1,-1]\ncolnames(data_medailles_sport_ete) &lt;- NULL\n\n# Renommer des colonnes \n\ncolnames(data_medailles_sport_ete) &lt;-  c(\"Discipline\", \"Annees\", \"Editions\",\n  \"Epreuves_2020\", \"Or\", \"Argent\", \"Bronze\", \"Total\", \"Athletes_medailles\",\n  \"Athletes_or\")\n\n#Coder en integer \n\ndata_medailles_sport_ete[, 3:8] &lt;- lapply(data_medailles_sport_ete[, 3:8], as.integer)\n\n\nLes 3 disciplines avec le plus de médailles distribuées\n\n\nlibrary(tidyverse)\nlibrary(dplyr)\n\n#Option avec le tidyverse\n\nTop3_disciplines &lt;- data_medailles_sport_ete |&gt; arrange(desc(Total)) |&gt; slice(1:3)\n\nTop3_disciplines\n\n# A tibble: 3 × 10\n  Discipline             Annees Editions Epreuves_2020    Or Argent Bronze Total\n  &lt;chr&gt;                  &lt;chr&gt;     &lt;int&gt;         &lt;int&gt; &lt;int&gt;  &lt;int&gt;  &lt;int&gt; &lt;int&gt;\n1 Athlétisme             Depui…       29            48  1028   1030   1027  3085\n2 Natation(hommes, femm… Depui…       29            37   607    604    603  1814\n3 Lutte                  1896,…       28            18   430    429    499  1358\n# ℹ 2 more variables: Athletes_medailles &lt;chr&gt;, Athletes_or &lt;chr&gt;\n\n#Une autre option avec la fct orderet regarder les 3 premiers\n\norder(data_medailles_sport_ete$Total, decreasing=TRUE)\n\n [1]  1 18 17 12  5 25  2  7  6 14  9 16 28  8 21 23 26 22 20  3 24 15 10  4 29\n[26] 30 13 19 27 11\n\n\nL’athléthisme, la natation et la lutte sont les trois disciplines avec le plus de médailles distribuées.\n\nLes 3 disciplines avec le moins d’épreuves en 2020\n\n\ndata_medailles_sport_ete_ordonne_epreuves2020 &lt;- data_medailles_sport_ete |&gt; arrange(Epreuves_2020) |&gt; slice(1:3)\ndata_medailles_sport_ete_ordonne_epreuves2020 ##Sélectionner les 3 dernières\n\n# A tibble: 3 × 10\n  Discipline Annees             Editions Epreuves_2020    Or Argent Bronze Total\n  &lt;chr&gt;      &lt;chr&gt;                 &lt;int&gt;         &lt;int&gt; &lt;int&gt;  &lt;int&gt;  &lt;int&gt; &lt;int&gt;\n1 Football   1900–1928,depuis …       27             2    34     34     35   103\n2 Golf       1900–1904,depuis …        4             2     8      8      9    19\n3 Handball   1936,depuis 1972         14             2    26     26     26    78\n# ℹ 2 more variables: Athletes_medailles &lt;chr&gt;, Athletes_or &lt;chr&gt;\n\n\nLe football, le golf et le handball ont été les disciplines avec le moins d’épreuves en 2020\n\nCalculer une fonction depuis qui représente depuis quelle année l’édition est au programme\n\n\ncalcul_nb_editions_int &lt;- function(depuis) {\n  return(2024-depuis)\n}\n\ncalcul_nb_editions_int(1896) ##Mettre l'année de commence au programme.\n\n[1] 128"
  },
  {
    "objectID": "index.html#bio",
    "href": "index.html#bio",
    "title": "Blog des Jeux Olympiques",
    "section": "Bio",
    "text": "Bio\nI’m a PhD candidate in Colin Beier’s lab, working on new tools to make complex, broad-scale systems easier for humans to understand. Right now, that means I split my time between predictive modeling (to monitor forest carbon sequestration across New York State, track the development of early-successional forests, and more) and visualization (including"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Prévision de la météorologie",
    "section": "",
    "text": "Le package olympicsWeather est une librairie de R dédiée à la récupération de prévisions météorologiques en temps réel. Son but dans ce projet est de pévoir la météo des différents sites olympiques qui aurant lieu du 26 juillet au 11 août 2024 pour célébrer les Jeux Olympiques 2024 à Paris. Il offre des fonctionnalités permettant d’obtenir des données détaillées sur les conditions climatiques par heure des 7 prochains jours.\n\n\nPour installer le package olympicsWeather depuis GitHub, vous pouvez utiliser le package remotes. Il est nécessaire d’avoir installé le package remotes au préalable. Il peut être installé avec la commande suivante :\n\ninstall.packages(\"remotes\")\n\nEnsuite, on peut utiliser la commande suivante pour installer olympicsWeather :\n\nremotes::install_github(\"YavaVilar/olympicsWeather\")\n\nLa librarie peut être importée de la façon suivante, ce qui permet d’utiliser ses fonctions pour avoir accès aux données météorologiques.\n\nlibrary(olympicsWeather)\n\nLa fonction get_forecast est la fonction principale de la librairie. Elle retourne un dataframe avec 5 colonnes relatives à la date et heure, la température, la température ressentie, la probabilité de précipitation et la précipitation effecitve. Ci-dessous, on trouve trois exemples d’implémentation pour le stade de France, le Tahiti et les coordonées géographiques 43.276703, 5.334791. Des graphiques ont été effectués avec la fonction get_forecast_visualisation pour visualiser les données sur la période 04/03/2024-10 - 10/03/2024."
  },
  {
    "objectID": "R avancé et Git présentation.html",
    "href": "R avancé et Git présentation.html",
    "title": "Cours R avancé et GitHub",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          Author\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n  \n\n\n\n\nExercices Semaine 1\n\n\n\n\n\n\n\n\n\n\n\n\nMar 3, 2024\n\n\nYava Vilar Valera\n\n\n\n\n\n\n  \n\n\n\n\nExercices Semaine 2\n\n\n\n\n\n\n\n\n\n\n\n\nMar 2, 2024\n\n\nYava Vilar valera\n\n\n\n\n\n\n  \n\n\n\n\nExercices Semaine 3\n\n\n\n\n\n\n\n\n\n\n\n\nMar 1, 2024\n\n\nYava Vilar Valera\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "index.html#librarie-olympicsweather",
    "href": "index.html#librarie-olympicsweather",
    "title": "Prévision de la météorologie",
    "section": "",
    "text": "Le package olympicsWeather est une librairie de R dédiée à la récupération de prévisions météorologiques en temps réel pour les différents sites olympiques qui aurant lieu du 26 juillet au 11 août 2024 pour célébrer les Jeux Olympiques 2024 à Paris. Il offre des fonctionnalités permettant d’obtenir des données détaillées sur les conditions météorologiques horaires des 7 prochains jours.\n\n\nPour installer le package olympicsWeather depuis GitHub, vous pouvez utiliser le package remotes. Il est nécessaire d’avoir installé le package remotes au préalable. Il peut être installé avec la commande suivante :\n\ninstall.packages(\"remotes\")\n\nEnsuite, on peut utiliser la commande suivante pour installer olympicsWeather :\n\nremotes::install_github(\"YavaVilar/olympicsWeather\")\n\nLa librarie peut être importée de la façon suivante, ce qui permet d’utiliser ses fonctions pour avoir accès aux données météorologiques.\n\nlibrary(olympicsWeather)\n\nLa fonction get_forecast est la fonction principale de la librairie. Elle retourne un dataframe avec 5 colonnes relatives à la date et heure, la température, la température ressentie, la probabilité de précipitation et la précipitation effecitve. Ci-dessous, on trouve trois exemples d’implémentation pour le stade de France, le Tahiti et les coordonées géographiques 43.276703, 5.334791. Des graphiques ont été effectués pour visualiser les données sur la période 04/03/2024-10 - 10/03/2024."
  },
  {
    "objectID": "index.html#prévision-de-la-météo-pour-le-stade-de-france",
    "href": "index.html#prévision-de-la-météo-pour-le-stade-de-france",
    "title": "Prévision de la météorologie",
    "section": "Prévision de la météo pour le stade de France",
    "text": "Prévision de la météo pour le stade de France\n\nmeteo_stade_france &lt;- get_forecast(\"stade de France\")\nmeteo_stade_france\n\n# A tibble: 168 × 5\n   data_heure     temperature_celsius temperature_ressenti…¹ precipitation_proba\n   &lt;chr&gt;                        &lt;dbl&gt;                  &lt;dbl&gt;               &lt;int&gt;\n 1 2024-03-05T00…                 7                      4.2                  13\n 2 2024-03-05T01…                 6.9                    4                     9\n 3 2024-03-05T02…                 6.8                    3.8                   4\n 4 2024-03-05T03…                 6.9                    4.2                   0\n 5 2024-03-05T04…                 6.7                    4.2                   1\n 6 2024-03-05T05…                 6.9                    4.8                   2\n 7 2024-03-05T06…                 7.2                    4.7                   3\n 8 2024-03-05T07…                 7.1                    4.4                   3\n 9 2024-03-05T08…                 7.2                    4.4                   3\n10 2024-03-05T09…                 7.8                    4.5                   3\n# ℹ 158 more rows\n# ℹ abbreviated name: ¹​temperature_ressentie_celsius\n# ℹ 1 more variable: precipitation &lt;dbl&gt;"
  },
  {
    "objectID": "index.html#prévision-de-la-météo-pour-tahiti",
    "href": "index.html#prévision-de-la-météo-pour-tahiti",
    "title": "Prévision de la météorologie",
    "section": "Prévision de la météo pour Tahiti",
    "text": "Prévision de la météo pour Tahiti\nLe Tahiti organisera les compétitions de surf aux JO 2024.\n\n\n\n\n\n\nmeteo_Tahiti &lt;- get_forecast(\"Tahiti\")\nmeteo_Tahiti\n\n# A tibble: 168 × 5\n   data_heure     temperature_celsius temperature_ressenti…¹ precipitation_proba\n   &lt;chr&gt;                        &lt;dbl&gt;                  &lt;dbl&gt;               &lt;int&gt;\n 1 2024-03-05T00…                17.7                   19.1                  42\n 2 2024-03-05T01…                17.6                   18.8                  48\n 3 2024-03-05T02…                17.6                   18.4                  55\n 4 2024-03-05T03…                17.7                   18.6                  61\n 5 2024-03-05T04…                17.8                   18.7                  65\n 6 2024-03-05T05…                17.8                   19                    70\n 7 2024-03-05T06…                17.7                   18.8                  74\n 8 2024-03-05T07…                17.6                   18.3                  83\n 9 2024-03-05T08…                17.6                   18.4                  91\n10 2024-03-05T09…                17.6                   18.5                 100\n# ℹ 158 more rows\n# ℹ abbreviated name: ¹​temperature_ressentie_celsius\n# ℹ 1 more variable: precipitation &lt;dbl&gt;"
  },
  {
    "objectID": "index.html#prévision-de-la-météo-pour-les-coordonnées-43.276703-5.334791",
    "href": "index.html#prévision-de-la-météo-pour-les-coordonnées-43.276703-5.334791",
    "title": "Prévision de la météorologie",
    "section": "Prévision de la météo pour les coordonnées 43.276703, 5.334791",
    "text": "Prévision de la météo pour les coordonnées 43.276703, 5.334791\nLes coordonées 43.276703, 5.334791 correspondent à une adresse située à Marseille, au Sud de la France. Cette ville recevra les épreuves de voile ainsi que 10 matches de tournoi de football.\n\n\n\n\n\n\nmeteo_coordonnées &lt;- get_forecast(\"43.276703,5.334791\")\nmeteo_coordonnées\n\n# A tibble: 168 × 5\n   data_heure     temperature_celsius temperature_ressenti…¹ precipitation_proba\n   &lt;chr&gt;                        &lt;dbl&gt;                  &lt;dbl&gt;               &lt;int&gt;\n 1 2024-03-05T00…                 5.4                    1.6                   0\n 2 2024-03-05T01…                 5.4                    1.6                   1\n 3 2024-03-05T02…                 5.6                    1.8                   2\n 4 2024-03-05T03…                 5.5                    1.7                   3\n 5 2024-03-05T04…                 5.6                    1.7                  13\n 6 2024-03-05T05…                 5.6                    1.8                  22\n 7 2024-03-05T06…                 5.6                    1                    32\n 8 2024-03-05T07…                 5                      1.2                  37\n 9 2024-03-05T08…                 5.9                    1                    43\n10 2024-03-05T09…                 7.1                    1.9                  48\n# ℹ 158 more rows\n# ℹ abbreviated name: ¹​temperature_ressentie_celsius\n# ℹ 1 more variable: precipitation &lt;dbl&gt;"
  },
  {
    "objectID": "about.html#librarie-olympicsweather",
    "href": "about.html#librarie-olympicsweather",
    "title": "Prévision de la météorologie",
    "section": "",
    "text": "Le package olympicsWeather est une librairie de R dédiée à la récupération de prévisions météorologiques en temps réel. Son but dans ce projet est de pévoir la météo des différents sites olympiques qui aurant lieu du 26 juillet au 11 août 2024 pour célébrer les Jeux Olympiques 2024 à Paris. Il offre des fonctionnalités permettant d’obtenir des données détaillées sur les conditions climatiques par heure des 7 prochains jours.\n\n\nPour installer le package olympicsWeather depuis GitHub, vous pouvez utiliser le package remotes. Il est nécessaire d’avoir installé le package remotes au préalable. Il peut être installé avec la commande suivante :\n\ninstall.packages(\"remotes\")\n\nEnsuite, on peut utiliser la commande suivante pour installer olympicsWeather :\n\nremotes::install_github(\"YavaVilar/olympicsWeather\")\n\nLa librarie peut être importée de la façon suivante, ce qui permet d’utiliser ses fonctions pour avoir accès aux données météorologiques.\n\nlibrary(olympicsWeather)\n\nLa fonction get_forecast est la fonction principale de la librairie. Elle retourne un dataframe avec 5 colonnes relatives à la date et heure, la température, la température ressentie, la probabilité de précipitation et la précipitation effecitve. Ci-dessous, on trouve trois exemples d’implémentation pour le stade de France, le Tahiti et les coordonées géographiques 43.276703, 5.334791. Des graphiques ont été effectués avec la fonction get_forecast_visualisation pour visualiser les données sur la période 04/03/2024-10 - 10/03/2024."
  },
  {
    "objectID": "about.html#prévision-de-la-météo-pour-le-stade-de-france",
    "href": "about.html#prévision-de-la-météo-pour-le-stade-de-france",
    "title": "Prévision de la météorologie",
    "section": "Prévision de la météo pour le stade de France",
    "text": "Prévision de la météo pour le stade de France\nLe Stade de France acceuillera la manisfestation sportive des Jeux Olympiques à Paris avec une capacité de 77 083 spectateurs. Le athléthisme, le rugby et le para-athlétisme seront également célébrés.\n\nmeteo_stade_france &lt;- get_forecast(\"stade de France\")\nmeteo_stade_france\n\n# A tibble: 168 × 5\n   data_heure     temperature_celsius temperature_ressenti…¹ precipitation_proba\n   &lt;chr&gt;                        &lt;dbl&gt;                  &lt;dbl&gt;               &lt;int&gt;\n 1 2024-03-05T00…                 7                      4.2                  13\n 2 2024-03-05T01…                 6.9                    4                     9\n 3 2024-03-05T02…                 6.8                    3.8                   4\n 4 2024-03-05T03…                 6.9                    4.2                   0\n 5 2024-03-05T04…                 6.7                    4.2                   1\n 6 2024-03-05T05…                 6.9                    4.8                   2\n 7 2024-03-05T06…                 7.2                    4.7                   3\n 8 2024-03-05T07…                 7.1                    4.4                   2\n 9 2024-03-05T08…                 7.2                    4.4                   1\n10 2024-03-05T09…                 7.8                    4.5                   0\n# ℹ 158 more rows\n# ℹ abbreviated name: ¹​temperature_ressentie_celsius\n# ℹ 1 more variable: precipitation &lt;dbl&gt;"
  },
  {
    "objectID": "about.html#prévision-de-la-météo-pour-tahiti",
    "href": "about.html#prévision-de-la-météo-pour-tahiti",
    "title": "Prévision de la météorologie",
    "section": "Prévision de la météo pour Tahiti",
    "text": "Prévision de la météo pour Tahiti\nLe Tahiti organisera les compétitions de surf aux Jeux Olympiques 2024.\n\n\nmeteo_Tahiti &lt;- get_forecast(\"Tahiti\")\nmeteo_Tahiti\n\n# A tibble: 168 × 5\n   data_heure     temperature_celsius temperature_ressenti…¹ precipitation_proba\n   &lt;chr&gt;                        &lt;dbl&gt;                  &lt;dbl&gt;               &lt;int&gt;\n 1 2024-03-05T00…                17.7                   19.1                  42\n 2 2024-03-05T01…                17.6                   18.8                  48\n 3 2024-03-05T02…                17.6                   18.4                  55\n 4 2024-03-05T03…                17.7                   18.6                  61\n 5 2024-03-05T04…                17.8                   18.7                  65\n 6 2024-03-05T05…                17.8                   19                    70\n 7 2024-03-05T06…                17.7                   18.8                  74\n 8 2024-03-05T07…                17.6                   18.3                  83\n 9 2024-03-05T08…                17.6                   18.4                  91\n10 2024-03-05T09…                17.6                   18.5                 100\n# ℹ 158 more rows\n# ℹ abbreviated name: ¹​temperature_ressentie_celsius\n# ℹ 1 more variable: precipitation &lt;dbl&gt;"
  },
  {
    "objectID": "about.html#prévision-de-la-météo-pour-les-coordonnées-43.276703-5.334791",
    "href": "about.html#prévision-de-la-météo-pour-les-coordonnées-43.276703-5.334791",
    "title": "Prévision de la météorologie",
    "section": "Prévision de la météo pour les coordonnées 43.276703, 5.334791",
    "text": "Prévision de la météo pour les coordonnées 43.276703, 5.334791\nLes coordonées 43.276703, 5.334791 correspondent à une adresse située à Marseille, au Sud de la France. Cette ville recevra les épreuves de voile ainsi que 10 matches de tournoi de football.\n\n\nmeteo_coordonnées &lt;- get_forecast(\"43.276703,5.334791\")\nmeteo_coordonnées\n\n# A tibble: 168 × 5\n   data_heure     temperature_celsius temperature_ressenti…¹ precipitation_proba\n   &lt;chr&gt;                        &lt;dbl&gt;                  &lt;dbl&gt;               &lt;int&gt;\n 1 2024-03-05T00…                 5.4                    1.6                   0\n 2 2024-03-05T01…                 5.4                    1.6                   1\n 3 2024-03-05T02…                 5.6                    1.8                   2\n 4 2024-03-05T03…                 5.5                    1.7                   3\n 5 2024-03-05T04…                 5.6                    1.7                  13\n 6 2024-03-05T05…                 5.6                    1.8                  22\n 7 2024-03-05T06…                 5.6                    1                    32\n 8 2024-03-05T07…                 5                      1.2                  26\n 9 2024-03-05T08…                 5.9                    1                    19\n10 2024-03-05T09…                 7.1                    1.9                  13\n# ℹ 158 more rows\n# ℹ abbreviated name: ¹​temperature_ressentie_celsius\n# ℹ 1 more variable: precipitation &lt;dbl&gt;"
  }
]