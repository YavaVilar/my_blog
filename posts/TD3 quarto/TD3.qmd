---
title: "Exercices Semaine 3"
date: "01/03/2024"
toc: true
author: Yava Vilar Valera
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo=TRUE, warning=FALSE, errors=FALSE, message=FALSE, results=TRUE, fig.width=8, fig.height=6)

```

## Exercises Semaine 3

![](images/clipboard-1669763147.png){fig-align="center" width="442"}

Ce tutorial se concentre sur l'apprentissage d'importation des fichiers avec des formats permettant de gérer de grandes bases de données. De même, les librairies **`dplyr, tidyr, string et lubridate`** seront exploitées pour analyser les informations relatives aux Jeux Olympiques historiques.

```{r, eval=FALSE}
install.packages("RSQLite")
```

-   **Lire le fichier parquet avec la librairie arrow, dimension et nom des colonnes**

```{r}

data_parquet <- arrow::read_parquet("C:/Users/yavav/OneDrive - Universitat de València/tokyo_athletes.parquet")
data_parquet <- as.data.frame(data_parquet)

View(data_parquet)
```

```{r}
dim(data_parquet) #Trois variables et 11085 colonnes
str(data_parquet) #Colonnes présentes: Name, NOC, Discipline
```

-   **Lire le fichier json avec la libraire jsonlite, dimension et nom des colonnes**

```{r}
chemin_acces <- "C:/Users/yavav/OneDrive - Universitat de València/olympics_athletes.json"

library(jsonlite)
datos_json <- fromJSON(chemin_acces)
datos_json <- as.data.frame(datos_json)
```

```{r}

dim(datos_json) #269731 lignes et 13 colonnes
str(datos_json) #On observe le nom des différentes colonnes
```

-   **Connexion à la base de données SQL site avec dbConnect**

```{r}
library(RSQLite)

con <- dbConnect(SQLite(), dbname ="C:/Users/yavav/Documents/R avancé et Git/data.sqlite")
```

-   **Créer deux nouvelles tables avec dbListTables**

```{r}
tables <- dbListTables(con)
print(tables) ##Tables: Tokyo_medals et Tokyo_teams
```

```{r}
library(RSQLite)
library(DBI)
dbWriteTable(con, "tokyo_athletes", data_parquet, overwrite=TRUE)
dbWriteTable(con, "olympics_athletes", datos_json, overwrite=TRUE)
```

-   **Inspecter la table olympics_athletes en utilisant la fonction dbListFields**

```{r}
colonnes_olympics_athletes <- dbListFields(con, "olympics_athletes")

# Afficher la liste des colonnes
print(colonnes_olympics_athletes)

colonnes_tokyo_athletes <- dbListFields(con, "tokyo_athletes")

# Afficher la liste des colonnes
print(colonnes_tokyo_athletes)
```

-   **Importer cette table depuis la base de données en utilisant la fonction dbReadTable.
    Convertir la table en tibble.**

```{r}

##Olympics

library(tibble)

#Lire la table depuis la base de données
table_olympics_athletes <- dbReadTable(con, "olympics_athletes")

# Convertir la table en tibble
tibble_olympics_athletes <- as_tibble(table_olympics_athletes)

##Athletes

#Lire la table depuis la base de données
table_tokyo_athletes <- dbReadTable(con, "tokyo_athletes")

# Convertir la table en tibble
tibble_tokyo_athletes <- as_tibble(table_tokyo_athletes)

```

**Libraires dplyr, tidyr**

-   **Convertir la colonne Sex en variable catégorielle avec la fonction mutate**

```{r}
#Importation des libraires 
library(dplyr)
library(tidyr)
```

```{r}
tibble_olympics_athletes <- tibble_olympics_athletes %>% mutate(Sex = as.factor(Sex))

```

-   **Créer deux colonnes à partir de la colonne Games**

```{r}
help("separate_wider_delim")

separate_wider_delim(tibble_olympics_athletes, cols = Games, delim= " ", names=c("Year", "isSummer"), cols_remove = FALSE)
```

-   **Créer deux colonnes à partir de la colonne Games. La première colonne Year sera une
    colonne de type integer contenant l’année des jeux. La deuxième colonne isSummer
    sera une colonne booléenne qui indiquera si les jeux sont des jeux d’été ou d’hive**r

```{r}

any(is.na(tibble_olympics_athletes$Age)) #Ce code permet de vérifier la présence des NA's au sein de la colonne Age
  
tibble_olympics_athletes %>% group_by(Games) %>%
  summarise(mean_age=mean(Age,na.rm=TRUE)) #Ce code calcule la moyenne d'age pour chacune des éditions des JO, en excluant les valeurs manquantes du calcul. 


```

-   **Moyenne d’age des athletes pour chacune des éditions des JO d’été. Edition qui a compté avec les athlètes les plus jeunes ? Les plus vieux ?**

```{r}

tibble_olympics_athletes %>% group_by(Games) %>%
  summarise(mean_age=mean(Age,na.rm=TRUE)) %>% 
  arrange(mean_age) %>% slice(1) #Cela permet d'ordonner de manière croissante les moyennes d'âge ainsi que de sélectionner la première ligne (les plus jeunes)

tibble_olympics_athletes %>% group_by(Games) %>%
  summarise(mean_age=mean(Age,na.rm=TRUE)) %>% 
  arrange(desc(mean_age)) %>% slice(1) #Cela ordonne de manière décroissante pour trouver les plus âgés 
```

On observe que l'édition qui a compté avec les athlètes les plus jeunes ont été les jeux d'hiver 1984, tandis que celle avec les plus vieux, les jeux d'été en 1932.

-   **Discipline des JO d’été dont la taille des athlètes féminines est la plus grande ? Quelle a été cette discipline au cours de chacune des éditions ? Nombre de fois où chaque discipline a été la discipline avec les plus grandes athlètes**

```{r}

tibble_olympics_athletes %>% filter(Sex=="F") %>% arrange(desc(Height)) %>% slice(1) %>% select(Height, Sport) #On filtre les femmes, on ordonne et sélectionne la ligne ainsi que les variables d'intérêt. 
```

La discipline dont la taille des athlètes féminines est la plus grande est le basketball.

```{r}
tibble_olympics_athletes %>% filter(Sex=="F" & !is.na(Height)) %>% group_by(Games) %>% 
  arrange(desc(Height)) %>% slice(1) %>% select(Games, Height, Sport) #On filtre pour les femmes et pour la taille sans valeurs manquantes, puis on calcule la taille plus grande pour chaque game et on sélectionne la colonne du sport correspondant. 
                                                           
```

```{r}

tibble_olympics_athletes %>% filter(Sex=="F" & !is.na(Height)) %>% group_by(Games) %>% 
  arrange(desc(Height)) %>% slice(1) %>% select(Games, Height, Sport) %>% pull(Sport) %>% table() #On extrait la colonne sport et fait un tablau de fréquence. 
```

**stringr, lubridate**

**On dispose du texte suivant** :

```{r}

texte <- "Les jeux olympiques d’été se déroulent normalement tous les 4 ans, durant les mois de Juillet et Août. Les jeux de Rio ont eu lieu du 5 Août 2016 au 20 Août 2016, ceux de Tokyo du 23 Juillet 2021 au 8 Août 2021, et ceux de Paris auront lieu du 26 Juillet 2024 au 11 Août 2024. Plus de 10000 athlètes sont attendus du monde
entier à Paris."
```

-   **Extraire les dates des différentes éditions des JO**

```{r}
#Chargement de librairie 
library(stringr)
```

```{r}
str_extract_all(texte, "\\b(\\d{1,2} \\w+ \\d{4})\\b")
```

-   **Remplacer les noms des mois par leur numéro pour rendre ces éléments convertibles en date en utilisant la fonction str_replace**

```{r}
str_replace_all(texte, c("Juillet"="7", "Août"="8"))
```

```{r}
library(lubridate)
```

```{r}

patron_dates <- "\\b(\\d{1,2} \\w+ \\d{4})\\b"

# Extraire et convertir toutes les dates
dates <- str_extract_all(texte, patron_dates) %>%
  lapply(function(matches) {
    dmy(matches)
  })

#Imprimer le résultat
print(dates)
```

-   **Combien de jours ont séparés les éditions de Rio et Tokyo ? Et sépareront les éditions de Tokyo et de Paris ? Faites le même calcul en semaines.**

```{r}

Rio_Tokyo <- difftime(dates[[1]][3], dates[[1]][2], units = "days") #Diff entre le troisième et deuxième élément de la liste dates en jour
print(Rio_Tokyo)

Tokyo_Paris <- difftime(dates[[1]][5], dates[[1]][4], units = "days") #Diff entre le cinquième et sixième élément de la liste dates en jour
print(Tokyo_Paris)

Rio_Tokyo_semaines <- difftime(dates[[1]][3], dates[[1]][2], units = "weeks") #Diff entre le troisième et deuxième élément de la liste dates en semaines
print(Rio_Tokyo_semaines)

Tokyo_Paris_semaines <- difftime(dates[[1]][5], dates[[1]][4], units = "weeks") #Diff entre le cinquième et sixième élément de la liste dates en semaines
print(Tokyo_Paris_semaines)
```
